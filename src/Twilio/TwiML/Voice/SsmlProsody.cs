/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;

namespace Twilio.TwiML.Voice
{

    /// <summary>
    /// Controling Volume, Speaking Rate, and Pitch in Say
    /// </summary>
    public class SsmlProsody : TwiML
    {
        /// <summary>
        /// Words to speak
        /// </summary>
        public string Words { get; set; }
        /// <summary>
        /// Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud, +ndB, -ndB
        /// </summary>
        public string Volume { get; set; }
        /// <summary>
        /// Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n%
        /// </summary>
        public string Rate { get; set; }
        /// <summary>
        /// Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
        /// </summary>
        public string Pitch { get; set; }

        /// <summary>
        /// Create a new SsmlProsody
        /// </summary>
        /// <param name="words"> Words to speak, the body of the TwiML Element. </param>
        /// <param name="volume"> Specify the volume, available values: default, silent, x-soft, soft, medium, loud, x-loud,
        ///              +ndB, -ndB </param>
        /// <param name="rate"> Specify the rate, available values: x-slow, slow, medium, fast, x-fast, n% </param>
        /// <param name="pitch"> Specify the pitch, available values: default, x-low, low, medium, high, x-high, +n%, -n%
        ///             </param>
        public SsmlProsody(string words = null,
                           string volume = null,
                           string rate = null,
                           string pitch = null) : base("prosody")
        {
            this.Words = words;
            this.Volume = volume;
            this.Rate = rate;
            this.Pitch = pitch;
        }

        /// <summary>
        /// Return the body of the TwiML tag
        /// </summary>
        protected override string GetElementBody()
        {
            return this.Words != null ? this.Words : string.Empty;
        }

        /// <summary>
        /// Return the attributes of the TwiML tag
        /// </summary>
        protected override List<XAttribute> GetElementAttributes()
        {
            var attributes = new List<XAttribute>();
            if (this.Volume != null)
            {
                attributes.Add(new XAttribute("volume", this.Volume));
            }
            if (this.Rate != null)
            {
                attributes.Add(new XAttribute("rate", this.Rate));
            }
            if (this.Pitch != null)
            {
                attributes.Add(new XAttribute("pitch", this.Pitch));
            }
            return attributes;
        }

        /// <summary>
        /// Append a child TwiML element to this element returning this element to allow chaining.
        /// </summary>
        /// <param name="childElem"> Child TwiML element to add </param>
        public new SsmlProsody Append(TwiML childElem)
        {
            return (SsmlProsody) base.Append(childElem);
        }

        /// <summary>
        /// Add freeform key-value attributes to the generated xml
        /// </summary>
        /// <param name="key"> Option key </param>
        /// <param name="value"> Option value </param>
        public new SsmlProsody SetOption(string key, object value)
        {
            return (SsmlProsody) base.SetOption(key, value);
        }
    }

}