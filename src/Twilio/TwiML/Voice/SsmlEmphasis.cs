/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;
using Twilio.Types;

namespace Twilio.TwiML.Voice 
{

    /// <summary>
    /// Emphasizing Words in Say
    /// </summary>
    public class SsmlEmphasis : TwiML 
    {
        public sealed class LevelEnum : StringEnum 
        {
            private LevelEnum(string value) : base(value) {}
            public LevelEnum() {}
            public static implicit operator LevelEnum(string value)
            {
                return new LevelEnum(value);
            }

            public static readonly LevelEnum Strong = new LevelEnum("strong");
            public static readonly LevelEnum Moderate = new LevelEnum("moderate");
            public static readonly LevelEnum Reduced = new LevelEnum("reduced");
        }

        /// <summary>
        /// Words to emphasize
        /// </summary>
        public string Words { get; set; }
        /// <summary>
        /// Specify the degree of emphasis
        /// </summary>
        public SsmlEmphasis.LevelEnum Level { get; set; }

        /// <summary>
        /// Create a new SsmlEmphasis
        /// </summary>
        /// <param name="words"> Words to emphasize, the body of the TwiML Element. </param>
        /// <param name="level"> Specify the degree of emphasis </param>
        public SsmlEmphasis(string words = null, SsmlEmphasis.LevelEnum level = null) : base("emphasis")
        {
            this.Words = words;
            this.Level = level;
        }

        /// <summary>
        /// Return the body of the TwiML tag
        /// </summary>
        protected override string GetElementBody()
        {
            return this.Words != null ? this.Words : string.Empty;
        }

        /// <summary>
        /// Return the attributes of the TwiML tag
        /// </summary>
        protected override List<XAttribute> GetElementAttributes()
        {
            var attributes = new List<XAttribute>();
            if (this.Level != null)
            {
                attributes.Add(new XAttribute("level", this.Level.ToString()));
            }
            return attributes;
        }

        /// <summary>
        /// Append a child TwiML element to this element returning this element to allow chaining.
        /// </summary>
        /// <param name="childElem"> Child TwiML element to add </param>
        public new SsmlEmphasis Append(TwiML childElem)
        {
            return (SsmlEmphasis) base.Append(childElem);
        }

        /// <summary>
        /// Add freeform key-value attributes to the generated xml
        /// </summary>
        /// <param name="key"> Option key </param>
        /// <param name="value"> Option value </param>
        public new SsmlEmphasis SetOption(string key, object value)
        {
            return (SsmlEmphasis) base.SetOption(key, value);
        }
    }

}