/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// ReservationResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Taskrouter.V1.Workspace.Task 
{

    public class ReservationResource : Resource 
    {
        public sealed class StatusEnum : StringEnum 
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }

            public static readonly StatusEnum Pending = new StatusEnum("pending");
            public static readonly StatusEnum Accepted = new StatusEnum("accepted");
            public static readonly StatusEnum Rejected = new StatusEnum("rejected");
            public static readonly StatusEnum Timeout = new StatusEnum("timeout");
            public static readonly StatusEnum Canceled = new StatusEnum("canceled");
            public static readonly StatusEnum Rescinded = new StatusEnum("rescinded");
            public static readonly StatusEnum Wrapping = new StatusEnum("wrapping");
            public static readonly StatusEnum Completed = new StatusEnum("completed");
        }

        public sealed class CallStatusEnum : StringEnum 
        {
            private CallStatusEnum(string value) : base(value) {}
            public CallStatusEnum() {}
            public static implicit operator CallStatusEnum(string value)
            {
                return new CallStatusEnum(value);
            }

            public static readonly CallStatusEnum Initiated = new CallStatusEnum("initiated");
            public static readonly CallStatusEnum Ringing = new CallStatusEnum("ringing");
            public static readonly CallStatusEnum Answered = new CallStatusEnum("answered");
            public static readonly CallStatusEnum Completed = new CallStatusEnum("completed");
        }

        public sealed class ConferenceEventEnum : StringEnum 
        {
            private ConferenceEventEnum(string value) : base(value) {}
            public ConferenceEventEnum() {}
            public static implicit operator ConferenceEventEnum(string value)
            {
                return new ConferenceEventEnum(value);
            }

            public static readonly ConferenceEventEnum Start = new ConferenceEventEnum("start");
            public static readonly ConferenceEventEnum End = new ConferenceEventEnum("end");
            public static readonly ConferenceEventEnum Join = new ConferenceEventEnum("join");
            public static readonly ConferenceEventEnum Leave = new ConferenceEventEnum("leave");
            public static readonly ConferenceEventEnum Mute = new ConferenceEventEnum("mute");
            public static readonly ConferenceEventEnum Hold = new ConferenceEventEnum("hold");
            public static readonly ConferenceEventEnum Speaker = new ConferenceEventEnum("speaker");
        }

        public sealed class SupervisorModeEnum : StringEnum 
        {
            private SupervisorModeEnum(string value) : base(value) {}
            public SupervisorModeEnum() {}
            public static implicit operator SupervisorModeEnum(string value)
            {
                return new SupervisorModeEnum(value);
            }

            public static readonly SupervisorModeEnum Monitor = new SupervisorModeEnum("monitor");
            public static readonly SupervisorModeEnum Whisper = new SupervisorModeEnum("whisper");
            public static readonly SupervisorModeEnum Barge = new SupervisorModeEnum("barge");
        }

        private static Request BuildReadRequest(ReadReservationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/Tasks/" + options.PathTaskSid + "/Reservations",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns> 
        public static ResourceSet<ReservationResource> Read(ReadReservationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<ReservationResource>.FromJson("reservations", response.Content);
            return new ResourceSet<ReservationResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<ReservationResource>> ReadAsync(ReadReservationOptions options, 
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<ReservationResource>.FromJson("reservations", response.Content);
            return new ResourceSet<ReservationResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathTaskSid"> The task_sid </param>
        /// <param name="reservationStatus"> Returns the list of reservations for a task with a specified ReservationStatus
        ///                         </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns> 
        public static ResourceSet<ReservationResource> Read(string pathWorkspaceSid, 
                                                            string pathTaskSid, 
                                                            ReservationResource.StatusEnum reservationStatus = null, 
                                                            int? pageSize = null, 
                                                            long? limit = null, 
                                                            ITwilioRestClient client = null)
        {
            var options = new ReadReservationOptions(pathWorkspaceSid, pathTaskSid){ReservationStatus = reservationStatus, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathTaskSid"> The task_sid </param>
        /// <param name="reservationStatus"> Returns the list of reservations for a task with a specified ReservationStatus
        ///                         </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<ReservationResource>> ReadAsync(string pathWorkspaceSid, 
                                                                                                    string pathTaskSid, 
                                                                                                    ReservationResource.StatusEnum reservationStatus = null, 
                                                                                                    int? pageSize = null, 
                                                                                                    long? limit = null, 
                                                                                                    ITwilioRestClient client = null)
        {
            var options = new ReadReservationOptions(pathWorkspaceSid, pathTaskSid){ReservationStatus = reservationStatus, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<ReservationResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ReservationResource>.FromJson("reservations", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<ReservationResource> NextPage(Page<ReservationResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Taskrouter,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<ReservationResource>.FromJson("reservations", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<ReservationResource> PreviousPage(Page<ReservationResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Taskrouter,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<ReservationResource>.FromJson("reservations", response.Content);
        }

        private static Request BuildFetchRequest(FetchReservationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/Tasks/" + options.PathTaskSid + "/Reservations/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns> 
        public static ReservationResource Fetch(FetchReservationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns> 
        public static async System.Threading.Tasks.Task<ReservationResource> FetchAsync(FetchReservationOptions options, 
                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathTaskSid"> The task_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns> 
        public static ReservationResource Fetch(string pathWorkspaceSid, 
                                                string pathTaskSid, 
                                                string pathSid, 
                                                ITwilioRestClient client = null)
        {
            var options = new FetchReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathTaskSid"> The task_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns> 
        public static async System.Threading.Tasks.Task<ReservationResource> FetchAsync(string pathWorkspaceSid, 
                                                                                        string pathTaskSid, 
                                                                                        string pathSid, 
                                                                                        ITwilioRestClient client = null)
        {
            var options = new FetchReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildUpdateRequest(UpdateReservationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/Tasks/" + options.PathTaskSid + "/Reservations/" + options.PathSid + "",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns> 
        public static ReservationResource Update(UpdateReservationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Reservation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns> 
        public static async System.Threading.Tasks.Task<ReservationResource> UpdateAsync(UpdateReservationOptions options, 
                                                                                         ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathTaskSid"> The task_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="reservationStatus"> New reservation status </param>
        /// <param name="workerActivitySid"> New worker activity sid if rejecting a reservation </param>
        /// <param name="instruction"> Assignment instruction for reservation </param>
        /// <param name="dequeuePostWorkActivitySid"> New worker activity sid after executing a Dequeue instruction </param>
        /// <param name="dequeueFrom"> Caller ID for the call to the worker when executing a Dequeue instruction </param>
        /// <param name="dequeueRecord"> Attribute to record both legs of a call when executing a Dequeue instruction </param>
        /// <param name="dequeueTimeout"> Timeout for call when executing a Dequeue instruction </param>
        /// <param name="dequeueTo"> Contact URI of the worker when executing a Dequeue instruction </param>
        /// <param name="dequeueStatusCallbackUrl"> Callback URL for completed call event when executing a Dequeue instruction
        ///                                </param>
        /// <param name="callFrom"> Caller ID for the outbound call when executing a Call instruction </param>
        /// <param name="callRecord"> Attribute to record both legs of a call when executing a Call instruction </param>
        /// <param name="callTimeout"> Timeout for call when executing a Call instruction </param>
        /// <param name="callTo"> Contact URI of the worker when executing a Call instruction </param>
        /// <param name="callUrl"> TwiML URI executed on answering the worker's leg as a result of the Call instruction </param>
        /// <param name="callStatusCallbackUrl"> Callback URL for completed call event when executing a Call instruction
        ///                             </param>
        /// <param name="callAccept"> Flag to determine if reservation should be accepted when executing a Call instruction
        ///                  </param>
        /// <param name="redirectCallSid"> Call sid of the call parked in the queue when executing a Redirect instruction
        ///                       </param>
        /// <param name="redirectAccept"> Flag to determine if reservation should be accepted when executing a Redirect
        ///                      instruction </param>
        /// <param name="redirectUrl"> TwiML URI to redirect the call to when executing the Redirect instruction </param>
        /// <param name="to"> Contact URI of the worker when executing a Conference instruction </param>
        /// <param name="from"> Caller ID for the call to the worker when executing a Conference instruction </param>
        /// <param name="statusCallback"> The status_callback </param>
        /// <param name="statusCallbackMethod"> The status_callback_method </param>
        /// <param name="statusCallbackEvent"> The status_callback_event </param>
        /// <param name="timeout"> Timeout for call when executing a Conference instruction </param>
        /// <param name="record"> The record </param>
        /// <param name="muted"> The muted </param>
        /// <param name="beep"> The beep </param>
        /// <param name="startConferenceOnEnter"> The start_conference_on_enter </param>
        /// <param name="endConferenceOnExit"> The end_conference_on_exit </param>
        /// <param name="waitUrl"> The wait_url </param>
        /// <param name="waitMethod"> The wait_method </param>
        /// <param name="earlyMedia"> The early_media </param>
        /// <param name="maxParticipants"> The max_participants </param>
        /// <param name="conferenceStatusCallback"> The conference_status_callback </param>
        /// <param name="conferenceStatusCallbackMethod"> The conference_status_callback_method </param>
        /// <param name="conferenceStatusCallbackEvent"> The conference_status_callback_event </param>
        /// <param name="conferenceRecord"> The conference_record </param>
        /// <param name="conferenceTrim"> The conference_trim </param>
        /// <param name="recordingChannels"> The recording_channels </param>
        /// <param name="recordingStatusCallback"> The recording_status_callback </param>
        /// <param name="recordingStatusCallbackMethod"> The recording_status_callback_method </param>
        /// <param name="conferenceRecordingStatusCallback"> The conference_recording_status_callback </param>
        /// <param name="conferenceRecordingStatusCallbackMethod"> The conference_recording_status_callback_method </param>
        /// <param name="region"> The region </param>
        /// <param name="sipAuthUsername"> The sip_auth_username </param>
        /// <param name="sipAuthPassword"> The sip_auth_password </param>
        /// <param name="dequeueStatusCallbackEvent"> Call progress events sent via webhooks as a result of a Dequeue
        ///                                  instruction </param>
        /// <param name="postWorkActivitySid"> New worker activity sid after executing a Conference instruction </param>
        /// <param name="supervisorMode"> Supervisor mode when executing the Supervise instruction </param>
        /// <param name="supervisor"> Supervisor sid/uri when executing the Supervise instruction </param>
        /// <param name="endConferenceOnCustomerExit"> The end_conference_on_customer_exit </param>
        /// <param name="beepOnCustomerEntrance"> The beep_on_customer_entrance </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Reservation </returns> 
        public static ReservationResource Update(string pathWorkspaceSid, 
                                                 string pathTaskSid, 
                                                 string pathSid, 
                                                 ReservationResource.StatusEnum reservationStatus = null, 
                                                 string workerActivitySid = null, 
                                                 string instruction = null, 
                                                 string dequeuePostWorkActivitySid = null, 
                                                 string dequeueFrom = null, 
                                                 string dequeueRecord = null, 
                                                 int? dequeueTimeout = null, 
                                                 string dequeueTo = null, 
                                                 Uri dequeueStatusCallbackUrl = null, 
                                                 string callFrom = null, 
                                                 string callRecord = null, 
                                                 int? callTimeout = null, 
                                                 string callTo = null, 
                                                 Uri callUrl = null, 
                                                 Uri callStatusCallbackUrl = null, 
                                                 bool? callAccept = null, 
                                                 string redirectCallSid = null, 
                                                 bool? redirectAccept = null, 
                                                 Uri redirectUrl = null, 
                                                 string to = null, 
                                                 string from = null, 
                                                 Uri statusCallback = null, 
                                                 Twilio.Http.HttpMethod statusCallbackMethod = null, 
                                                 List<ReservationResource.CallStatusEnum> statusCallbackEvent = null, 
                                                 int? timeout = null, 
                                                 bool? record = null, 
                                                 bool? muted = null, 
                                                 string beep = null, 
                                                 bool? startConferenceOnEnter = null, 
                                                 bool? endConferenceOnExit = null, 
                                                 Uri waitUrl = null, 
                                                 Twilio.Http.HttpMethod waitMethod = null, 
                                                 bool? earlyMedia = null, 
                                                 int? maxParticipants = null, 
                                                 Uri conferenceStatusCallback = null, 
                                                 Twilio.Http.HttpMethod conferenceStatusCallbackMethod = null, 
                                                 List<ReservationResource.ConferenceEventEnum> conferenceStatusCallbackEvent = null, 
                                                 string conferenceRecord = null, 
                                                 string conferenceTrim = null, 
                                                 string recordingChannels = null, 
                                                 Uri recordingStatusCallback = null, 
                                                 Twilio.Http.HttpMethod recordingStatusCallbackMethod = null, 
                                                 Uri conferenceRecordingStatusCallback = null, 
                                                 Twilio.Http.HttpMethod conferenceRecordingStatusCallbackMethod = null, 
                                                 string region = null, 
                                                 string sipAuthUsername = null, 
                                                 string sipAuthPassword = null, 
                                                 List<string> dequeueStatusCallbackEvent = null, 
                                                 string postWorkActivitySid = null, 
                                                 ReservationResource.SupervisorModeEnum supervisorMode = null, 
                                                 string supervisor = null, 
                                                 bool? endConferenceOnCustomerExit = null, 
                                                 bool? beepOnCustomerEntrance = null, 
                                                 ITwilioRestClient client = null)
        {
            var options = new UpdateReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid){ReservationStatus = reservationStatus, WorkerActivitySid = workerActivitySid, Instruction = instruction, DequeuePostWorkActivitySid = dequeuePostWorkActivitySid, DequeueFrom = dequeueFrom, DequeueRecord = dequeueRecord, DequeueTimeout = dequeueTimeout, DequeueTo = dequeueTo, DequeueStatusCallbackUrl = dequeueStatusCallbackUrl, CallFrom = callFrom, CallRecord = callRecord, CallTimeout = callTimeout, CallTo = callTo, CallUrl = callUrl, CallStatusCallbackUrl = callStatusCallbackUrl, CallAccept = callAccept, RedirectCallSid = redirectCallSid, RedirectAccept = redirectAccept, RedirectUrl = redirectUrl, To = to, From = from, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, StatusCallbackEvent = statusCallbackEvent, Timeout = timeout, Record = record, Muted = muted, Beep = beep, StartConferenceOnEnter = startConferenceOnEnter, EndConferenceOnExit = endConferenceOnExit, WaitUrl = waitUrl, WaitMethod = waitMethod, EarlyMedia = earlyMedia, MaxParticipants = maxParticipants, ConferenceStatusCallback = conferenceStatusCallback, ConferenceStatusCallbackMethod = conferenceStatusCallbackMethod, ConferenceStatusCallbackEvent = conferenceStatusCallbackEvent, ConferenceRecord = conferenceRecord, ConferenceTrim = conferenceTrim, RecordingChannels = recordingChannels, RecordingStatusCallback = recordingStatusCallback, RecordingStatusCallbackMethod = recordingStatusCallbackMethod, ConferenceRecordingStatusCallback = conferenceRecordingStatusCallback, ConferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod, Region = region, SipAuthUsername = sipAuthUsername, SipAuthPassword = sipAuthPassword, DequeueStatusCallbackEvent = dequeueStatusCallbackEvent, PostWorkActivitySid = postWorkActivitySid, SupervisorMode = supervisorMode, Supervisor = supervisor, EndConferenceOnCustomerExit = endConferenceOnCustomerExit, BeepOnCustomerEntrance = beepOnCustomerEntrance};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathTaskSid"> The task_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="reservationStatus"> New reservation status </param>
        /// <param name="workerActivitySid"> New worker activity sid if rejecting a reservation </param>
        /// <param name="instruction"> Assignment instruction for reservation </param>
        /// <param name="dequeuePostWorkActivitySid"> New worker activity sid after executing a Dequeue instruction </param>
        /// <param name="dequeueFrom"> Caller ID for the call to the worker when executing a Dequeue instruction </param>
        /// <param name="dequeueRecord"> Attribute to record both legs of a call when executing a Dequeue instruction </param>
        /// <param name="dequeueTimeout"> Timeout for call when executing a Dequeue instruction </param>
        /// <param name="dequeueTo"> Contact URI of the worker when executing a Dequeue instruction </param>
        /// <param name="dequeueStatusCallbackUrl"> Callback URL for completed call event when executing a Dequeue instruction
        ///                                </param>
        /// <param name="callFrom"> Caller ID for the outbound call when executing a Call instruction </param>
        /// <param name="callRecord"> Attribute to record both legs of a call when executing a Call instruction </param>
        /// <param name="callTimeout"> Timeout for call when executing a Call instruction </param>
        /// <param name="callTo"> Contact URI of the worker when executing a Call instruction </param>
        /// <param name="callUrl"> TwiML URI executed on answering the worker's leg as a result of the Call instruction </param>
        /// <param name="callStatusCallbackUrl"> Callback URL for completed call event when executing a Call instruction
        ///                             </param>
        /// <param name="callAccept"> Flag to determine if reservation should be accepted when executing a Call instruction
        ///                  </param>
        /// <param name="redirectCallSid"> Call sid of the call parked in the queue when executing a Redirect instruction
        ///                       </param>
        /// <param name="redirectAccept"> Flag to determine if reservation should be accepted when executing a Redirect
        ///                      instruction </param>
        /// <param name="redirectUrl"> TwiML URI to redirect the call to when executing the Redirect instruction </param>
        /// <param name="to"> Contact URI of the worker when executing a Conference instruction </param>
        /// <param name="from"> Caller ID for the call to the worker when executing a Conference instruction </param>
        /// <param name="statusCallback"> The status_callback </param>
        /// <param name="statusCallbackMethod"> The status_callback_method </param>
        /// <param name="statusCallbackEvent"> The status_callback_event </param>
        /// <param name="timeout"> Timeout for call when executing a Conference instruction </param>
        /// <param name="record"> The record </param>
        /// <param name="muted"> The muted </param>
        /// <param name="beep"> The beep </param>
        /// <param name="startConferenceOnEnter"> The start_conference_on_enter </param>
        /// <param name="endConferenceOnExit"> The end_conference_on_exit </param>
        /// <param name="waitUrl"> The wait_url </param>
        /// <param name="waitMethod"> The wait_method </param>
        /// <param name="earlyMedia"> The early_media </param>
        /// <param name="maxParticipants"> The max_participants </param>
        /// <param name="conferenceStatusCallback"> The conference_status_callback </param>
        /// <param name="conferenceStatusCallbackMethod"> The conference_status_callback_method </param>
        /// <param name="conferenceStatusCallbackEvent"> The conference_status_callback_event </param>
        /// <param name="conferenceRecord"> The conference_record </param>
        /// <param name="conferenceTrim"> The conference_trim </param>
        /// <param name="recordingChannels"> The recording_channels </param>
        /// <param name="recordingStatusCallback"> The recording_status_callback </param>
        /// <param name="recordingStatusCallbackMethod"> The recording_status_callback_method </param>
        /// <param name="conferenceRecordingStatusCallback"> The conference_recording_status_callback </param>
        /// <param name="conferenceRecordingStatusCallbackMethod"> The conference_recording_status_callback_method </param>
        /// <param name="region"> The region </param>
        /// <param name="sipAuthUsername"> The sip_auth_username </param>
        /// <param name="sipAuthPassword"> The sip_auth_password </param>
        /// <param name="dequeueStatusCallbackEvent"> Call progress events sent via webhooks as a result of a Dequeue
        ///                                  instruction </param>
        /// <param name="postWorkActivitySid"> New worker activity sid after executing a Conference instruction </param>
        /// <param name="supervisorMode"> Supervisor mode when executing the Supervise instruction </param>
        /// <param name="supervisor"> Supervisor sid/uri when executing the Supervise instruction </param>
        /// <param name="endConferenceOnCustomerExit"> The end_conference_on_customer_exit </param>
        /// <param name="beepOnCustomerEntrance"> The beep_on_customer_entrance </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Reservation </returns> 
        public static async System.Threading.Tasks.Task<ReservationResource> UpdateAsync(string pathWorkspaceSid, 
                                                                                         string pathTaskSid, 
                                                                                         string pathSid, 
                                                                                         ReservationResource.StatusEnum reservationStatus = null, 
                                                                                         string workerActivitySid = null, 
                                                                                         string instruction = null, 
                                                                                         string dequeuePostWorkActivitySid = null, 
                                                                                         string dequeueFrom = null, 
                                                                                         string dequeueRecord = null, 
                                                                                         int? dequeueTimeout = null, 
                                                                                         string dequeueTo = null, 
                                                                                         Uri dequeueStatusCallbackUrl = null, 
                                                                                         string callFrom = null, 
                                                                                         string callRecord = null, 
                                                                                         int? callTimeout = null, 
                                                                                         string callTo = null, 
                                                                                         Uri callUrl = null, 
                                                                                         Uri callStatusCallbackUrl = null, 
                                                                                         bool? callAccept = null, 
                                                                                         string redirectCallSid = null, 
                                                                                         bool? redirectAccept = null, 
                                                                                         Uri redirectUrl = null, 
                                                                                         string to = null, 
                                                                                         string from = null, 
                                                                                         Uri statusCallback = null, 
                                                                                         Twilio.Http.HttpMethod statusCallbackMethod = null, 
                                                                                         List<ReservationResource.CallStatusEnum> statusCallbackEvent = null, 
                                                                                         int? timeout = null, 
                                                                                         bool? record = null, 
                                                                                         bool? muted = null, 
                                                                                         string beep = null, 
                                                                                         bool? startConferenceOnEnter = null, 
                                                                                         bool? endConferenceOnExit = null, 
                                                                                         Uri waitUrl = null, 
                                                                                         Twilio.Http.HttpMethod waitMethod = null, 
                                                                                         bool? earlyMedia = null, 
                                                                                         int? maxParticipants = null, 
                                                                                         Uri conferenceStatusCallback = null, 
                                                                                         Twilio.Http.HttpMethod conferenceStatusCallbackMethod = null, 
                                                                                         List<ReservationResource.ConferenceEventEnum> conferenceStatusCallbackEvent = null, 
                                                                                         string conferenceRecord = null, 
                                                                                         string conferenceTrim = null, 
                                                                                         string recordingChannels = null, 
                                                                                         Uri recordingStatusCallback = null, 
                                                                                         Twilio.Http.HttpMethod recordingStatusCallbackMethod = null, 
                                                                                         Uri conferenceRecordingStatusCallback = null, 
                                                                                         Twilio.Http.HttpMethod conferenceRecordingStatusCallbackMethod = null, 
                                                                                         string region = null, 
                                                                                         string sipAuthUsername = null, 
                                                                                         string sipAuthPassword = null, 
                                                                                         List<string> dequeueStatusCallbackEvent = null, 
                                                                                         string postWorkActivitySid = null, 
                                                                                         ReservationResource.SupervisorModeEnum supervisorMode = null, 
                                                                                         string supervisor = null, 
                                                                                         bool? endConferenceOnCustomerExit = null, 
                                                                                         bool? beepOnCustomerEntrance = null, 
                                                                                         ITwilioRestClient client = null)
        {
            var options = new UpdateReservationOptions(pathWorkspaceSid, pathTaskSid, pathSid){ReservationStatus = reservationStatus, WorkerActivitySid = workerActivitySid, Instruction = instruction, DequeuePostWorkActivitySid = dequeuePostWorkActivitySid, DequeueFrom = dequeueFrom, DequeueRecord = dequeueRecord, DequeueTimeout = dequeueTimeout, DequeueTo = dequeueTo, DequeueStatusCallbackUrl = dequeueStatusCallbackUrl, CallFrom = callFrom, CallRecord = callRecord, CallTimeout = callTimeout, CallTo = callTo, CallUrl = callUrl, CallStatusCallbackUrl = callStatusCallbackUrl, CallAccept = callAccept, RedirectCallSid = redirectCallSid, RedirectAccept = redirectAccept, RedirectUrl = redirectUrl, To = to, From = from, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, StatusCallbackEvent = statusCallbackEvent, Timeout = timeout, Record = record, Muted = muted, Beep = beep, StartConferenceOnEnter = startConferenceOnEnter, EndConferenceOnExit = endConferenceOnExit, WaitUrl = waitUrl, WaitMethod = waitMethod, EarlyMedia = earlyMedia, MaxParticipants = maxParticipants, ConferenceStatusCallback = conferenceStatusCallback, ConferenceStatusCallbackMethod = conferenceStatusCallbackMethod, ConferenceStatusCallbackEvent = conferenceStatusCallbackEvent, ConferenceRecord = conferenceRecord, ConferenceTrim = conferenceTrim, RecordingChannels = recordingChannels, RecordingStatusCallback = recordingStatusCallback, RecordingStatusCallbackMethod = recordingStatusCallbackMethod, ConferenceRecordingStatusCallback = conferenceRecordingStatusCallback, ConferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod, Region = region, SipAuthUsername = sipAuthUsername, SipAuthPassword = sipAuthPassword, DequeueStatusCallbackEvent = dequeueStatusCallbackEvent, PostWorkActivitySid = postWorkActivitySid, SupervisorMode = supervisorMode, Supervisor = supervisor, EndConferenceOnCustomerExit = endConferenceOnCustomerExit, BeepOnCustomerEntrance = beepOnCustomerEntrance};
            return await UpdateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a ReservationResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ReservationResource object represented by the provided JSON </returns> 
        public static ReservationResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<ReservationResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The ID of the Account that owns this Task
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The date_created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The date_updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// The current status of the reservation.
        /// </summary>
        [JsonProperty("reservation_status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public ReservationResource.StatusEnum ReservationStatus { get; private set; }
        /// <summary>
        /// The unique ID of this Reservation.
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The ID of the reserved Task
        /// </summary>
        [JsonProperty("task_sid")]
        public string TaskSid { get; private set; }
        /// <summary>
        /// Human readable description of the Worker that is reserved
        /// </summary>
        [JsonProperty("worker_name")]
        public string WorkerName { get; private set; }
        /// <summary>
        /// The ID of the reserved Worker
        /// </summary>
        [JsonProperty("worker_sid")]
        public string WorkerSid { get; private set; }
        /// <summary>
        /// The ID of the Workspace that this task is contained within.
        /// </summary>
        [JsonProperty("workspace_sid")]
        public string WorkspaceSid { get; private set; }
        /// <summary>
        /// The url
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// The links
        /// </summary>
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }

        private ReservationResource()
        {

        }
    }

}