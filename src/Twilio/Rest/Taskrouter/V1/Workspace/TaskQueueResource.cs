/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// TaskQueueResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Taskrouter.V1.Workspace 
{

    public class TaskQueueResource : Resource 
    {
        public sealed class TaskOrderEnum : StringEnum 
        {
            private TaskOrderEnum(string value) : base(value) {}
            public TaskOrderEnum() {}
            public static implicit operator TaskOrderEnum(string value)
            {
                return new TaskOrderEnum(value);
            }

            public static readonly TaskOrderEnum Fifo = new TaskOrderEnum("FIFO");
            public static readonly TaskOrderEnum Lifo = new TaskOrderEnum("LIFO");
        }

        private static Request BuildFetchRequest(FetchTaskQueueOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/TaskQueues/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static TaskQueueResource Fetch(FetchTaskQueueOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<TaskQueueResource> FetchAsync(FetchTaskQueueOptions options, 
                                                                                      ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static TaskQueueResource Fetch(string pathWorkspaceSid, string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchTaskQueueOptions(pathWorkspaceSid, pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<TaskQueueResource> FetchAsync(string pathWorkspaceSid, 
                                                                                      string pathSid, 
                                                                                      ITwilioRestClient client = null)
        {
            var options = new FetchTaskQueueOptions(pathWorkspaceSid, pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildUpdateRequest(UpdateTaskQueueOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/TaskQueues/" + options.PathSid + "",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static TaskQueueResource Update(UpdateTaskQueueOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<TaskQueueResource> UpdateAsync(UpdateTaskQueueOptions options, 
                                                                                       ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="friendlyName"> Human readable description of this TaskQueue </param>
        /// <param name="targetWorkers"> A string describing the Worker selection criteria for any Tasks that enter this
        ///                     TaskQueue. </param>
        /// <param name="reservationActivitySid"> ActivitySID that will be assigned to Workers when they are reserved for a
        ///                              task from this TaskQueue. </param>
        /// <param name="assignmentActivitySid"> ActivitySID that will be assigned to Workers when they are assigned a task
        ///                             from this TaskQueue. </param>
        /// <param name="maxReservedWorkers"> The maximum amount of workers to create reservations for the assignment of a task
        ///                          while in this queue. </param>
        /// <param name="taskOrder"> TaskOrder will determine which order the Tasks will be assigned to Workers. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static TaskQueueResource Update(string pathWorkspaceSid, 
                                               string pathSid, 
                                               string friendlyName = null, 
                                               string targetWorkers = null, 
                                               string reservationActivitySid = null, 
                                               string assignmentActivitySid = null, 
                                               int? maxReservedWorkers = null, 
                                               TaskQueueResource.TaskOrderEnum taskOrder = null, 
                                               ITwilioRestClient client = null)
        {
            var options = new UpdateTaskQueueOptions(pathWorkspaceSid, pathSid){FriendlyName = friendlyName, TargetWorkers = targetWorkers, ReservationActivitySid = reservationActivitySid, AssignmentActivitySid = assignmentActivitySid, MaxReservedWorkers = maxReservedWorkers, TaskOrder = taskOrder};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="friendlyName"> Human readable description of this TaskQueue </param>
        /// <param name="targetWorkers"> A string describing the Worker selection criteria for any Tasks that enter this
        ///                     TaskQueue. </param>
        /// <param name="reservationActivitySid"> ActivitySID that will be assigned to Workers when they are reserved for a
        ///                              task from this TaskQueue. </param>
        /// <param name="assignmentActivitySid"> ActivitySID that will be assigned to Workers when they are assigned a task
        ///                             from this TaskQueue. </param>
        /// <param name="maxReservedWorkers"> The maximum amount of workers to create reservations for the assignment of a task
        ///                          while in this queue. </param>
        /// <param name="taskOrder"> TaskOrder will determine which order the Tasks will be assigned to Workers. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<TaskQueueResource> UpdateAsync(string pathWorkspaceSid, 
                                                                                       string pathSid, 
                                                                                       string friendlyName = null, 
                                                                                       string targetWorkers = null, 
                                                                                       string reservationActivitySid = null, 
                                                                                       string assignmentActivitySid = null, 
                                                                                       int? maxReservedWorkers = null, 
                                                                                       TaskQueueResource.TaskOrderEnum taskOrder = null, 
                                                                                       ITwilioRestClient client = null)
        {
            var options = new UpdateTaskQueueOptions(pathWorkspaceSid, pathSid){FriendlyName = friendlyName, TargetWorkers = targetWorkers, ReservationActivitySid = reservationActivitySid, AssignmentActivitySid = assignmentActivitySid, MaxReservedWorkers = maxReservedWorkers, TaskOrder = taskOrder};
            return await UpdateAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadTaskQueueOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/TaskQueues",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static ResourceSet<TaskQueueResource> Read(ReadTaskQueueOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<TaskQueueResource>.FromJson("task_queues", response.Content);
            return new ResourceSet<TaskQueueResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<TaskQueueResource>> ReadAsync(ReadTaskQueueOptions options, 
                                                                                                  ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<TaskQueueResource>.FromJson("task_queues", response.Content);
            return new ResourceSet<TaskQueueResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="friendlyName"> Filter by a human readable description of a TaskQueue </param>
        /// <param name="evaluateWorkerAttributes"> Provide a Worker attributes expression, and this will return the list of
        ///                                TaskQueues that would distribute tasks to a worker with these attributes. </param>
        /// <param name="workerSid"> The worker_sid </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static ResourceSet<TaskQueueResource> Read(string pathWorkspaceSid, 
                                                          string friendlyName = null, 
                                                          string evaluateWorkerAttributes = null, 
                                                          string workerSid = null, 
                                                          int? pageSize = null, 
                                                          long? limit = null, 
                                                          ITwilioRestClient client = null)
        {
            var options = new ReadTaskQueueOptions(pathWorkspaceSid){FriendlyName = friendlyName, EvaluateWorkerAttributes = evaluateWorkerAttributes, WorkerSid = workerSid, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="friendlyName"> Filter by a human readable description of a TaskQueue </param>
        /// <param name="evaluateWorkerAttributes"> Provide a Worker attributes expression, and this will return the list of
        ///                                TaskQueues that would distribute tasks to a worker with these attributes. </param>
        /// <param name="workerSid"> The worker_sid </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<TaskQueueResource>> ReadAsync(string pathWorkspaceSid, 
                                                                                                  string friendlyName = null, 
                                                                                                  string evaluateWorkerAttributes = null, 
                                                                                                  string workerSid = null, 
                                                                                                  int? pageSize = null, 
                                                                                                  long? limit = null, 
                                                                                                  ITwilioRestClient client = null)
        {
            var options = new ReadTaskQueueOptions(pathWorkspaceSid){FriendlyName = friendlyName, EvaluateWorkerAttributes = evaluateWorkerAttributes, WorkerSid = workerSid, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<TaskQueueResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<TaskQueueResource>.FromJson("task_queues", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<TaskQueueResource> NextPage(Page<TaskQueueResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Taskrouter,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<TaskQueueResource>.FromJson("task_queues", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<TaskQueueResource> PreviousPage(Page<TaskQueueResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Taskrouter,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<TaskQueueResource>.FromJson("task_queues", response.Content);
        }

        private static Request BuildCreateRequest(CreateTaskQueueOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/TaskQueues",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static TaskQueueResource Create(CreateTaskQueueOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<TaskQueueResource> CreateAsync(CreateTaskQueueOptions options, 
                                                                                       ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// create
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="friendlyName"> Human readable description of this TaskQueue </param>
        /// <param name="targetWorkers"> A string describing the Worker selection criteria for any Tasks that enter this
        ///                     TaskQueue. </param>
        /// <param name="maxReservedWorkers"> The maximum amount of workers to create reservations for the assignment of a task
        ///                          while in this queue. </param>
        /// <param name="taskOrder"> TaskOrder will determine which order the Tasks will be assigned to Workers. </param>
        /// <param name="reservationActivitySid"> ActivitySID to assign workers once a task is reserved for them </param>
        /// <param name="assignmentActivitySid"> ActivitySID to assign workers once a task is assigned for them </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static TaskQueueResource Create(string pathWorkspaceSid, 
                                               string friendlyName, 
                                               string targetWorkers = null, 
                                               int? maxReservedWorkers = null, 
                                               TaskQueueResource.TaskOrderEnum taskOrder = null, 
                                               string reservationActivitySid = null, 
                                               string assignmentActivitySid = null, 
                                               ITwilioRestClient client = null)
        {
            var options = new CreateTaskQueueOptions(pathWorkspaceSid, friendlyName){TargetWorkers = targetWorkers, MaxReservedWorkers = maxReservedWorkers, TaskOrder = taskOrder, ReservationActivitySid = reservationActivitySid, AssignmentActivitySid = assignmentActivitySid};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="friendlyName"> Human readable description of this TaskQueue </param>
        /// <param name="targetWorkers"> A string describing the Worker selection criteria for any Tasks that enter this
        ///                     TaskQueue. </param>
        /// <param name="maxReservedWorkers"> The maximum amount of workers to create reservations for the assignment of a task
        ///                          while in this queue. </param>
        /// <param name="taskOrder"> TaskOrder will determine which order the Tasks will be assigned to Workers. </param>
        /// <param name="reservationActivitySid"> ActivitySID to assign workers once a task is reserved for them </param>
        /// <param name="assignmentActivitySid"> ActivitySID to assign workers once a task is assigned for them </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<TaskQueueResource> CreateAsync(string pathWorkspaceSid, 
                                                                                       string friendlyName, 
                                                                                       string targetWorkers = null, 
                                                                                       int? maxReservedWorkers = null, 
                                                                                       TaskQueueResource.TaskOrderEnum taskOrder = null, 
                                                                                       string reservationActivitySid = null, 
                                                                                       string assignmentActivitySid = null, 
                                                                                       ITwilioRestClient client = null)
        {
            var options = new CreateTaskQueueOptions(pathWorkspaceSid, friendlyName){TargetWorkers = targetWorkers, MaxReservedWorkers = maxReservedWorkers, TaskOrder = taskOrder, ReservationActivitySid = reservationActivitySid, AssignmentActivitySid = assignmentActivitySid};
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildDeleteRequest(DeleteTaskQueueOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/TaskQueues/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// delete
        /// </summary>
        /// <param name="options"> Delete TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static bool Delete(DeleteTaskQueueOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary>
        /// delete
        /// </summary>
        /// <param name="options"> Delete TaskQueue parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteTaskQueueOptions options, 
                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary>
        /// delete
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TaskQueue </returns> 
        public static bool Delete(string pathWorkspaceSid, string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteTaskQueueOptions(pathWorkspaceSid, pathSid);
            return Delete(options, client);
        }

        #if !NET35
        /// <summary>
        /// delete
        /// </summary>
        /// <param name="pathWorkspaceSid"> The workspace_sid </param>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TaskQueue </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathWorkspaceSid, 
                                                                          string pathSid, 
                                                                          ITwilioRestClient client = null)
        {
            var options = new DeleteTaskQueueOptions(pathWorkspaceSid, pathSid);
            return await DeleteAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a TaskQueueResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> TaskQueueResource object represented by the provided JSON </returns> 
        public static TaskQueueResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<TaskQueueResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The ID of the Account that owns this TaskQueue
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// ActivitySID to assign workers once a task is assigned for them
        /// </summary>
        [JsonProperty("assignment_activity_sid")]
        public string AssignmentActivitySid { get; private set; }
        /// <summary>
        /// The assignment_activity_name
        /// </summary>
        [JsonProperty("assignment_activity_name")]
        public string AssignmentActivityName { get; private set; }
        /// <summary>
        /// The date_created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The date_updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// Filter by a human readable description of a TaskQueue
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// The maximum amount of workers to create reservations for the assignment of a task while in this queue.
        /// </summary>
        [JsonProperty("max_reserved_workers")]
        public int? MaxReservedWorkers { get; private set; }
        /// <summary>
        /// ActivitySID to assign workers once a task is reserved for them
        /// </summary>
        [JsonProperty("reservation_activity_sid")]
        public string ReservationActivitySid { get; private set; }
        /// <summary>
        /// The reservation_activity_name
        /// </summary>
        [JsonProperty("reservation_activity_name")]
        public string ReservationActivityName { get; private set; }
        /// <summary>
        /// The unique ID of the TaskQueue
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// A string describing the Worker selection criteria for any Tasks that enter this TaskQueue.
        /// </summary>
        [JsonProperty("target_workers")]
        public string TargetWorkers { get; private set; }
        /// <summary>
        /// TaskOrder will determine which order the Tasks will be assigned to Workers.
        /// </summary>
        [JsonProperty("task_order")]
        [JsonConverter(typeof(StringEnumConverter))]
        public TaskQueueResource.TaskOrderEnum TaskOrder { get; private set; }
        /// <summary>
        /// The url
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// The ID of the Workspace that owns this TaskQueue
        /// </summary>
        [JsonProperty("workspace_sid")]
        public string WorkspaceSid { get; private set; }
        /// <summary>
        /// The links
        /// </summary>
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }

        private TaskQueueResource()
        {

        }
    }

}