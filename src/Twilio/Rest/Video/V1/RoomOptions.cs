/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Video.V1 
{

    /// <summary>
    /// FetchRoomOptions
    /// </summary>
    public class FetchRoomOptions : IOptions<RoomResource> 
    {
        /// <summary>
        /// The Room Sid or name that uniquely identifies this resource.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchRoomOptions
        /// </summary>
        /// <param name="pathSid"> The Room Sid or name that uniquely identifies this resource. </param>
        public FetchRoomOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// CreateRoomOptions
    /// </summary>
    public class CreateRoomOptions : IOptions<RoomResource> 
    {
        /// <summary>
        /// Use Twilio Network Traversal for TURN service.
        /// </summary>
        public bool? EnableTurn { get; set; }
        /// <summary>
        /// Type of room, either peer-to-peer, group-small or group.
        /// </summary>
        public RoomResource.RoomTypeEnum Type { get; set; }
        /// <summary>
        /// Name of the Room.
        /// </summary>
        public string UniqueName { get; set; }
        /// <summary>
        /// A URL that Twilio sends asynchronous webhook requests to on every room event.
        /// </summary>
        public Uri StatusCallback { get; set; }
        /// <summary>
        /// HTTP method Twilio should use when requesting the above URL.
        /// </summary>
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }
        /// <summary>
        /// Maximum number of Participants in the Room.
        /// </summary>
        public int? MaxParticipants { get; set; }
        /// <summary>
        /// Start Participant recording when connected.
        /// </summary>
        public bool? RecordParticipantsOnConnect { get; set; }
        /// <summary>
        /// An array of video codecs supported when publishing a Track in the Room.
        /// </summary>
        public List<RoomResource.VideoCodecEnum> VideoCodecs { get; set; }
        /// <summary>
        /// Region for the media server in Group Rooms.
        /// </summary>
        public string MediaRegion { get; set; }

        /// <summary>
        /// Construct a new CreateRoomOptions
        /// </summary>
        public CreateRoomOptions()
        {
            VideoCodecs = new List<RoomResource.VideoCodecEnum>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (EnableTurn != null)
            {
                p.Add(new KeyValuePair<string, string>("EnableTurn", EnableTurn.Value.ToString().ToLower()));
            }

            if (Type != null)
            {
                p.Add(new KeyValuePair<string, string>("Type", Type.ToString()));
            }

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }

            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }

            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }

            if (MaxParticipants != null)
            {
                p.Add(new KeyValuePair<string, string>("MaxParticipants", MaxParticipants.Value.ToString()));
            }

            if (RecordParticipantsOnConnect != null)
            {
                p.Add(new KeyValuePair<string, string>("RecordParticipantsOnConnect", RecordParticipantsOnConnect.Value.ToString().ToLower()));
            }

            if (VideoCodecs != null)
            {
                p.AddRange(VideoCodecs.Select(prop => new KeyValuePair<string, string>("VideoCodecs", prop.ToString())));
            }

            if (MediaRegion != null)
            {
                p.Add(new KeyValuePair<string, string>("MediaRegion", MediaRegion));
            }

            return p;
        }
    }

    /// <summary>
    /// ReadRoomOptions
    /// </summary>
    public class ReadRoomOptions : ReadOptions<RoomResource> 
    {
        /// <summary>
        /// Only show Rooms with the given status.
        /// </summary>
        public RoomResource.RoomStatusEnum Status { get; set; }
        /// <summary>
        /// Only show Rooms with the provided Name.
        /// </summary>
        public string UniqueName { get; set; }
        /// <summary>
        /// Only show Rooms that started on or after this date, given as YYYY-MM-DD.
        /// </summary>
        public DateTime? DateCreatedAfter { get; set; }
        /// <summary>
        /// Only show Rooms that started before this date, given as YYYY-MM-DD.
        /// </summary>
        public DateTime? DateCreatedBefore { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }

            if (DateCreatedAfter != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedAfter", Serializers.DateTimeIso8601(DateCreatedAfter)));
            }

            if (DateCreatedBefore != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedBefore", Serializers.DateTimeIso8601(DateCreatedBefore)));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// UpdateRoomOptions
    /// </summary>
    public class UpdateRoomOptions : IOptions<RoomResource> 
    {
        /// <summary>
        /// The Room Sid or name that uniquely identifies this resource.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// Set to completed to end the Room.
        /// </summary>
        public RoomResource.RoomStatusEnum Status { get; }

        /// <summary>
        /// Construct a new UpdateRoomOptions
        /// </summary>
        /// <param name="pathSid"> The Room Sid or name that uniquely identifies this resource. </param>
        /// <param name="status"> Set to completed to end the Room. </param>
        public UpdateRoomOptions(string pathSid, RoomResource.RoomStatusEnum status)
        {
            PathSid = pathSid;
            Status = status;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            return p;
        }
    }

}