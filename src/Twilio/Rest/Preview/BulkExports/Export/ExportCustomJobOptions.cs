/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Preview.BulkExports.Export
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// ReadExportCustomJobOptions
    /// </summary>
    public class ReadExportCustomJobOptions : ReadOptions<ExportCustomJobResource>
    {
        /// <summary>
        /// The type of communication – Messages, Calls
        /// </summary>
        public string PathResourceType { get; }
        /// <summary>
        /// The token for the next page of job results
        /// </summary>
        public string NextToken { get; set; }
        /// <summary>
        /// The token for the previous page of result
        /// </summary>
        public string PreviousToken { get; set; }

        /// <summary>
        /// Construct a new ReadExportCustomJobOptions
        /// </summary>
        /// <param name="pathResourceType"> The type of communication – Messages, Calls </param>
        public ReadExportCustomJobOptions(string pathResourceType)
        {
            PathResourceType = pathResourceType;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (NextToken != null)
            {
                p.Add(new KeyValuePair<string, string>("NextToken", NextToken));
            }

            if (PreviousToken != null)
            {
                p.Add(new KeyValuePair<string, string>("PreviousToken", PreviousToken));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// CreateExportCustomJobOptions
    /// </summary>
    public class CreateExportCustomJobOptions : IOptions<ExportCustomJobResource>
    {
        /// <summary>
        /// The type of communication – Messages, Calls
        /// </summary>
        public string PathResourceType { get; }
        /// <summary>
        /// The friendly_name
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// The start_day
        /// </summary>
        public string StartDay { get; set; }
        /// <summary>
        /// The end_day
        /// </summary>
        public string EndDay { get; set; }
        /// <summary>
        /// The webhook_url
        /// </summary>
        public string WebhookUrl { get; set; }
        /// <summary>
        /// The webhook_method
        /// </summary>
        public string WebhookMethod { get; set; }
        /// <summary>
        /// The email
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Construct a new CreateExportCustomJobOptions
        /// </summary>
        /// <param name="pathResourceType"> The type of communication – Messages, Calls </param>
        public CreateExportCustomJobOptions(string pathResourceType)
        {
            PathResourceType = pathResourceType;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (StartDay != null)
            {
                p.Add(new KeyValuePair<string, string>("StartDay", StartDay));
            }

            if (EndDay != null)
            {
                p.Add(new KeyValuePair<string, string>("EndDay", EndDay));
            }

            if (WebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhookUrl", WebhookUrl));
            }

            if (WebhookMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhookMethod", WebhookMethod));
            }

            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("Email", Email));
            }

            return p;
        }
    }

}