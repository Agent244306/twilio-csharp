/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Preview.TrustedComms 
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// Initiates a Branded Call.
    /// </summary>
    public class CreatePhoneCallOptions : IOptions<PhoneCallResource> 
    {
        /// <summary>
        /// The originating Phone Number
        /// </summary>
        public string From { get; }
        /// <summary>
        /// The terminating Phone Number
        /// </summary>
        public string To { get; }
        /// <summary>
        /// The Twiml URL
        /// </summary>
        public string Url { get; }
        /// <summary>
        /// The business reason for this phone call
        /// </summary>
        public string Reason { get; set; }

        /// <summary>
        /// Construct a new CreatePhoneCallOptions
        /// </summary>
        /// <param name="from"> The originating Phone Number </param>
        /// <param name="to"> The terminating Phone Number </param>
        /// <param name="url"> The Twiml URL </param>
        public CreatePhoneCallOptions(string from, string to, string url)
        {
            From = from;
            To = to;
            Url = url;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (From != null)
            {
                p.Add(new KeyValuePair<string, string>("From", From));
            }

            if (To != null)
            {
                p.Add(new KeyValuePair<string, string>("To", To));
            }

            if (Url != null)
            {
                p.Add(new KeyValuePair<string, string>("Url", Url));
            }

            if (Reason != null)
            {
                p.Add(new KeyValuePair<string, string>("Reason", Reason));
            }

            return p;
        }
    }

}