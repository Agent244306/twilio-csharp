/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
///
/// DeviceResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Preview.TrustedComms
{

    public class DeviceResource : Resource
    {
        private static Request BuildCreateRequest(CreateDeviceOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Preview,
                "/TrustedComms/Devices",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// Registers a new Device and Push Token against Trusted Comms API. This works specially for iOS devices, which don't
        /// allow the SDK to know when there's an incoming call, nor the originating number.
        /// </summary>
        /// <param name="options"> Create Device parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Device </returns>
        public static DeviceResource Create(CreateDeviceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Registers a new Device and Push Token against Trusted Comms API. This works specially for iOS devices, which don't
        /// allow the SDK to know when there's an incoming call, nor the originating number.
        /// </summary>
        /// <param name="options"> Create Device parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Device </returns>
        public static async System.Threading.Tasks.Task<DeviceResource> CreateAsync(CreateDeviceOptions options,
                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Registers a new Device and Push Token against Trusted Comms API. This works specially for iOS devices, which don't
        /// allow the SDK to know when there's an incoming call, nor the originating number.
        /// </summary>
        /// <param name="phoneNumber"> The end user Phone Number </param>
        /// <param name="pushToken"> The Push Token for this Phone Number </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Device </returns>
        public static DeviceResource Create(string phoneNumber, string pushToken, ITwilioRestClient client = null)
        {
            var options = new CreateDeviceOptions(phoneNumber, pushToken);
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// Registers a new Device and Push Token against Trusted Comms API. This works specially for iOS devices, which don't
        /// allow the SDK to know when there's an incoming call, nor the originating number.
        /// </summary>
        /// <param name="phoneNumber"> The end user Phone Number </param>
        /// <param name="pushToken"> The Push Token for this Phone Number </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Device </returns>
        public static async System.Threading.Tasks.Task<DeviceResource> CreateAsync(string phoneNumber,
                                                                                    string pushToken,
                                                                                    ITwilioRestClient client = null)
        {
            var options = new CreateDeviceOptions(phoneNumber, pushToken);
            return await CreateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a DeviceResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> DeviceResource object represented by the provided JSON </returns>
        public static DeviceResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<DeviceResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// Binding Sid.
        /// </summary>
        [JsonProperty("binding_sid")]
        public string BindingSid { get; private set; }
        /// <summary>
        /// The end user Phone Number
        /// </summary>
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; private set; }
        /// <summary>
        /// A string that uniquely identifies this Device.
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The URL of this resource.
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private DeviceResource()
        {

        }
    }

}