/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Sync.V1.Service.SyncMap 
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// FetchSyncMapItemOptions
    /// </summary>
    public class FetchSyncMapItemOptions : IOptions<SyncMapItemResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The map_sid
        /// </summary>
        public string PathMapSid { get; }
        /// <summary>
        /// The key
        /// </summary>
        public string PathKey { get; }

        /// <summary>
        /// Construct a new FetchSyncMapItemOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathMapSid"> The map_sid </param>
        /// <param name="pathKey"> The key </param>
        public FetchSyncMapItemOptions(string pathServiceSid, string pathMapSid, string pathKey)
        {
            PathServiceSid = pathServiceSid;
            PathMapSid = pathMapSid;
            PathKey = pathKey;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// DeleteSyncMapItemOptions
    /// </summary>
    public class DeleteSyncMapItemOptions : IOptions<SyncMapItemResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The map_sid
        /// </summary>
        public string PathMapSid { get; }
        /// <summary>
        /// The key
        /// </summary>
        public string PathKey { get; }

        /// <summary>
        /// Construct a new DeleteSyncMapItemOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathMapSid"> The map_sid </param>
        /// <param name="pathKey"> The key </param>
        public DeleteSyncMapItemOptions(string pathServiceSid, string pathMapSid, string pathKey)
        {
            PathServiceSid = pathServiceSid;
            PathMapSid = pathMapSid;
            PathKey = pathKey;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// CreateSyncMapItemOptions
    /// </summary>
    public class CreateSyncMapItemOptions : IOptions<SyncMapItemResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The map_sid
        /// </summary>
        public string PathMapSid { get; }
        /// <summary>
        /// The unique user-defined key of this Map Item.
        /// </summary>
        public string Key { get; }
        /// <summary>
        /// Contains arbitrary user-defined, schema-less data that this Map Item stores, represented by a JSON object, up to 16KB.
        /// </summary>
        public object Data { get; }
        /// <summary>
        /// Alias for item_ttl
        /// </summary>
        public int? Ttl { get; set; }
        /// <summary>
        /// Time-to-live of this item in seconds, defaults to no expiration.
        /// </summary>
        public int? ItemTtl { get; set; }
        /// <summary>
        /// Time-to-live of this item's parent Map in seconds, defaults to no expiration.
        /// </summary>
        public int? CollectionTtl { get; set; }

        /// <summary>
        /// Construct a new CreateSyncMapItemOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathMapSid"> The map_sid </param>
        /// <param name="key"> The unique user-defined key of this Map Item. </param>
        /// <param name="data"> Contains arbitrary user-defined, schema-less data that this Map Item stores, represented by a
        ///            JSON object, up to 16KB. </param>
        public CreateSyncMapItemOptions(string pathServiceSid, string pathMapSid, string key, object data)
        {
            PathServiceSid = pathServiceSid;
            PathMapSid = pathMapSid;
            Key = key;
            Data = data;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Key != null)
            {
                p.Add(new KeyValuePair<string, string>("Key", Key));
            }

            if (Data != null)
            {
                p.Add(new KeyValuePair<string, string>("Data", Serializers.JsonObject(Data)));
            }

            if (Ttl != null)
            {
                p.Add(new KeyValuePair<string, string>("Ttl", Ttl.ToString()));
            }

            if (ItemTtl != null)
            {
                p.Add(new KeyValuePair<string, string>("ItemTtl", ItemTtl.ToString()));
            }

            if (CollectionTtl != null)
            {
                p.Add(new KeyValuePair<string, string>("CollectionTtl", CollectionTtl.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// ReadSyncMapItemOptions
    /// </summary>
    public class ReadSyncMapItemOptions : ReadOptions<SyncMapItemResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The map_sid
        /// </summary>
        public string PathMapSid { get; }
        /// <summary>
        /// A string; asc or desc. Map Items are ordered lexicographically by Item key.
        /// </summary>
        public SyncMapItemResource.QueryResultOrderEnum Order { get; set; }
        /// <summary>
        /// The Item key offset (including the specified key).
        /// </summary>
        public string From { get; set; }
        /// <summary>
        /// The bounds
        /// </summary>
        public SyncMapItemResource.QueryFromBoundTypeEnum Bounds { get; set; }

        /// <summary>
        /// Construct a new ReadSyncMapItemOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathMapSid"> The map_sid </param>
        public ReadSyncMapItemOptions(string pathServiceSid, string pathMapSid)
        {
            PathServiceSid = pathServiceSid;
            PathMapSid = pathMapSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Order != null)
            {
                p.Add(new KeyValuePair<string, string>("Order", Order.ToString()));
            }

            if (From != null)
            {
                p.Add(new KeyValuePair<string, string>("From", From));
            }

            if (Bounds != null)
            {
                p.Add(new KeyValuePair<string, string>("Bounds", Bounds.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// UpdateSyncMapItemOptions
    /// </summary>
    public class UpdateSyncMapItemOptions : IOptions<SyncMapItemResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The map_sid
        /// </summary>
        public string PathMapSid { get; }
        /// <summary>
        /// The key
        /// </summary>
        public string PathKey { get; }
        /// <summary>
        /// Contains an arbitrary JSON object to be stored in this Map Item.
        /// </summary>
        public object Data { get; set; }
        /// <summary>
        /// Alias for item_ttl
        /// </summary>
        public int? Ttl { get; set; }
        /// <summary>
        /// Time-to-live of this item in seconds, defaults to no expiration.
        /// </summary>
        public int? ItemTtl { get; set; }
        /// <summary>
        /// Time-to-live of this item's parent Map in seconds, defaults to no expiration.
        /// </summary>
        public int? CollectionTtl { get; set; }

        /// <summary>
        /// Construct a new UpdateSyncMapItemOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathMapSid"> The map_sid </param>
        /// <param name="pathKey"> The key </param>
        public UpdateSyncMapItemOptions(string pathServiceSid, string pathMapSid, string pathKey)
        {
            PathServiceSid = pathServiceSid;
            PathMapSid = pathMapSid;
            PathKey = pathKey;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Data != null)
            {
                p.Add(new KeyValuePair<string, string>("Data", Serializers.JsonObject(Data)));
            }

            if (Ttl != null)
            {
                p.Add(new KeyValuePair<string, string>("Ttl", Ttl.ToString()));
            }

            if (ItemTtl != null)
            {
                p.Add(new KeyValuePair<string, string>("ItemTtl", ItemTtl.ToString()));
            }

            if (CollectionTtl != null)
            {
                p.Add(new KeyValuePair<string, string>("CollectionTtl", CollectionTtl.ToString()));
            }

            return p;
        }
    }

}