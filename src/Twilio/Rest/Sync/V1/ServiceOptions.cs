/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Sync.V1
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// FetchServiceOptions
    /// </summary>
    public class FetchServiceOptions : IOptions<ServiceResource>
    {
        /// <summary>
        /// A unique identifier for this service instance.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchServiceOptions
        /// </summary>
        /// <param name="pathSid"> A unique identifier for this service instance. </param>
        public FetchServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// DeleteServiceOptions
    /// </summary>
    public class DeleteServiceOptions : IOptions<ServiceResource>
    {
        /// <summary>
        /// A unique identifier for this service instance.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteServiceOptions
        /// </summary>
        /// <param name="pathSid"> A unique identifier for this service instance. </param>
        public DeleteServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// CreateServiceOptions
    /// </summary>
    public class CreateServiceOptions : IOptions<ServiceResource>
    {
        /// <summary>
        /// Human-readable name for this service instance
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// A URL that will receive event updates when objects are manipulated.
        /// </summary>
        public Uri WebhookUrl { get; set; }
        /// <summary>
        /// true or false - controls whether this instance fires webhooks when client endpoints connect to Sync
        /// </summary>
        public bool? ReachabilityWebhooksEnabled { get; set; }
        /// <summary>
        /// true or false - determines whether token identities must be granted access to Sync objects via the Permissions API in this Service.
        /// </summary>
        public bool? AclEnabled { get; set; }
        /// <summary>
        /// true or false - Determines whether transient disconnections (i.e. an immediate reconnect succeeds) cause reachability webhooks.
        /// </summary>
        public bool? ReachabilityDebouncingEnabled { get; set; }
        /// <summary>
        /// Determines how long an identity must be offline before reachability webhooks fire.
        /// </summary>
        public int? ReachabilityDebouncingWindow { get; set; }
        /// <summary>
        /// true or false - controls whether this instance fires webhooks when Sync objects are updated through REST
        /// </summary>
        public bool? WebhooksFromRestEnabled { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (WebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhookUrl", Serializers.Url(WebhookUrl)));
            }

            if (ReachabilityWebhooksEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("ReachabilityWebhooksEnabled", ReachabilityWebhooksEnabled.Value.ToString().ToLower()));
            }

            if (AclEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("AclEnabled", AclEnabled.Value.ToString().ToLower()));
            }

            if (ReachabilityDebouncingEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("ReachabilityDebouncingEnabled", ReachabilityDebouncingEnabled.Value.ToString().ToLower()));
            }

            if (ReachabilityDebouncingWindow != null)
            {
                p.Add(new KeyValuePair<string, string>("ReachabilityDebouncingWindow", ReachabilityDebouncingWindow.ToString()));
            }

            if (WebhooksFromRestEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhooksFromRestEnabled", WebhooksFromRestEnabled.Value.ToString().ToLower()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// ReadServiceOptions
    /// </summary>
    public class ReadServiceOptions : ReadOptions<ServiceResource>
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// UpdateServiceOptions
    /// </summary>
    public class UpdateServiceOptions : IOptions<ServiceResource>
    {
        /// <summary>
        /// A unique identifier for this service instance.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// A URL that will receive event updates when objects are manipulated.
        /// </summary>
        public Uri WebhookUrl { get; set; }
        /// <summary>
        /// Human-readable name for this service instance
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// True or false - controls whether this instance fires webhooks when client endpoints connect to Sync
        /// </summary>
        public bool? ReachabilityWebhooksEnabled { get; set; }
        /// <summary>
        /// true or false - determines whether token identities must be granted access to Sync objects via the Permissions API in this Service.
        /// </summary>
        public bool? AclEnabled { get; set; }
        /// <summary>
        /// true or false - Determines whether transient disconnections (i.e. an immediate reconnect succeeds) cause reachability webhooks.
        /// </summary>
        public bool? ReachabilityDebouncingEnabled { get; set; }
        /// <summary>
        /// Determines how long an identity must be offline before reachability webhooks fire.
        /// </summary>
        public int? ReachabilityDebouncingWindow { get; set; }
        /// <summary>
        /// true or false - controls whether this instance fires webhooks when Sync objects are updated through REST
        /// </summary>
        public bool? WebhooksFromRestEnabled { get; set; }

        /// <summary>
        /// Construct a new UpdateServiceOptions
        /// </summary>
        /// <param name="pathSid"> A unique identifier for this service instance. </param>
        public UpdateServiceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (WebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhookUrl", Serializers.Url(WebhookUrl)));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (ReachabilityWebhooksEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("ReachabilityWebhooksEnabled", ReachabilityWebhooksEnabled.Value.ToString().ToLower()));
            }

            if (AclEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("AclEnabled", AclEnabled.Value.ToString().ToLower()));
            }

            if (ReachabilityDebouncingEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("ReachabilityDebouncingEnabled", ReachabilityDebouncingEnabled.Value.ToString().ToLower()));
            }

            if (ReachabilityDebouncingWindow != null)
            {
                p.Add(new KeyValuePair<string, string>("ReachabilityDebouncingWindow", ReachabilityDebouncingWindow.ToString()));
            }

            if (WebhooksFromRestEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhooksFromRestEnabled", WebhooksFromRestEnabled.Value.ToString().ToLower()));
            }

            return p;
        }
    }

}