/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Api.V2010.Account.IncomingPhoneNumber 
{

    /// <summary>
    /// ReadTollFreeOptions
    /// </summary>
    public class ReadTollFreeOptions : ReadOptions<TollFreeResource> 
    {
        /// <summary>
        /// The account_sid
        /// </summary>
        public string PathAccountSid { get; set; }
        /// <summary>
        /// Include phone numbers new to the Twilio platform.
        /// </summary>
        public bool? Beta { get; set; }
        /// <summary>
        /// Only show the incoming phone number resources with friendly names that exactly match this name.
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// Only show the incoming phone number resources that match this pattern.
        /// </summary>
        public Types.PhoneNumber PhoneNumber { get; set; }
        /// <summary>
        /// Include phone numbers based on the origin, by default, phone numbers of all origin are included.
        /// </summary>
        public string Origin { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Beta != null)
            {
                p.Add(new KeyValuePair<string, string>("Beta", Beta.Value.ToString().ToLower()));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (PhoneNumber != null)
            {
                p.Add(new KeyValuePair<string, string>("PhoneNumber", PhoneNumber.ToString()));
            }

            if (Origin != null)
            {
                p.Add(new KeyValuePair<string, string>("Origin", Origin));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// CreateTollFreeOptions
    /// </summary>
    public class CreateTollFreeOptions : IOptions<TollFreeResource> 
    {
        /// <summary>
        /// The account_sid
        /// </summary>
        public string PathAccountSid { get; set; }
        /// <summary>
        /// The phone number you want to purchase.
        /// </summary>
        public Types.PhoneNumber PhoneNumber { get; }
        /// <summary>
        /// The Twilio REST API version to use for incoming calls made to this number.
        /// </summary>
        public string ApiVersion { get; set; }
        /// <summary>
        /// A human readable description of the new incoming phone number.
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// The 34 character sid of the application Twilio should use to handle SMSs sent to the new number.
        /// </summary>
        public string SmsApplicationSid { get; set; }
        /// <summary>
        /// The HTTP method that should be used to request the SmsFallbackUrl.
        /// </summary>
        public Twilio.Http.HttpMethod SmsFallbackMethod { get; set; }
        /// <summary>
        /// A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl.
        /// </summary>
        public Uri SmsFallbackUrl { get; set; }
        /// <summary>
        /// The HTTP method that should be used to request the SmsUrl.
        /// </summary>
        public Twilio.Http.HttpMethod SmsMethod { get; set; }
        /// <summary>
        /// The URL that Twilio should request when somebody sends an SMS to the phone number.
        /// </summary>
        public Uri SmsUrl { get; set; }
        /// <summary>
        /// The URL that Twilio will request to pass status parameters to your application.
        /// </summary>
        public Uri StatusCallback { get; set; }
        /// <summary>
        /// The HTTP method Twilio will use to make requests to the StatusCallback URL.
        /// </summary>
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }
        /// <summary>
        /// The 34 character sid of the application Twilio should use to handle phone calls to the new number.
        /// </summary>
        public string VoiceApplicationSid { get; set; }
        /// <summary>
        /// Do a lookup of a caller's name from the CNAM database and post it to your app.
        /// </summary>
        public bool? VoiceCallerIdLookup { get; set; }
        /// <summary>
        /// The HTTP method that should be used to request the VoiceFallbackUrl.
        /// </summary>
        public Twilio.Http.HttpMethod VoiceFallbackMethod { get; set; }
        /// <summary>
        /// A URL that Twilio will request if an error occurs requesting or executing the TwiML at Url.
        /// </summary>
        public Uri VoiceFallbackUrl { get; set; }
        /// <summary>
        /// The HTTP method that should be used to request the VoiceUrl.
        /// </summary>
        public Twilio.Http.HttpMethod VoiceMethod { get; set; }
        /// <summary>
        /// The URL that Twilio should request when somebody dials the new phone number.
        /// </summary>
        public Uri VoiceUrl { get; set; }
        /// <summary>
        /// The identity_sid
        /// </summary>
        public string IdentitySid { get; set; }
        /// <summary>
        /// The 34 character sid of the address Twilio should associate with the number.
        /// </summary>
        public string AddressSid { get; set; }

        /// <summary>
        /// Construct a new CreateTollFreeOptions
        /// </summary>
        /// <param name="phoneNumber"> The phone number you want to purchase. </param>
        public CreateTollFreeOptions(Types.PhoneNumber phoneNumber)
        {
            PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PhoneNumber != null)
            {
                p.Add(new KeyValuePair<string, string>("PhoneNumber", PhoneNumber.ToString()));
            }

            if (ApiVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("ApiVersion", ApiVersion));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (SmsApplicationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsApplicationSid", SmsApplicationSid.ToString()));
            }

            if (SmsFallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsFallbackMethod", SmsFallbackMethod.ToString()));
            }

            if (SmsFallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsFallbackUrl", Serializers.Url(SmsFallbackUrl)));
            }

            if (SmsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsMethod", SmsMethod.ToString()));
            }

            if (SmsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsUrl", Serializers.Url(SmsUrl)));
            }

            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }

            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }

            if (VoiceApplicationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("VoiceApplicationSid", VoiceApplicationSid.ToString()));
            }

            if (VoiceCallerIdLookup != null)
            {
                p.Add(new KeyValuePair<string, string>("VoiceCallerIdLookup", VoiceCallerIdLookup.Value.ToString().ToLower()));
            }

            if (VoiceFallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("VoiceFallbackMethod", VoiceFallbackMethod.ToString()));
            }

            if (VoiceFallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("VoiceFallbackUrl", Serializers.Url(VoiceFallbackUrl)));
            }

            if (VoiceMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("VoiceMethod", VoiceMethod.ToString()));
            }

            if (VoiceUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("VoiceUrl", Serializers.Url(VoiceUrl)));
            }

            if (IdentitySid != null)
            {
                p.Add(new KeyValuePair<string, string>("IdentitySid", IdentitySid.ToString()));
            }

            if (AddressSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AddressSid", AddressSid.ToString()));
            }

            return p;
        }
    }

}