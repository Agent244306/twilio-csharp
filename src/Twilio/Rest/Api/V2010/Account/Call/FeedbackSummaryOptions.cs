/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Api.V2010.Account.Call 
{

    /// <summary>
    /// CreateFeedbackSummaryOptions
    /// </summary>
    public class CreateFeedbackSummaryOptions : IOptions<FeedbackSummaryResource> 
    {
        /// <summary>
        /// The account_sid
        /// </summary>
        public string PathAccountSid { get; set; }
        /// <summary>
        /// Only include usage that has occurred on or after this date.
        /// </summary>
        public DateTime? StartDate { get; }
        /// <summary>
        /// Only include usage that has occurred on or before this date.
        /// </summary>
        public DateTime? EndDate { get; }
        /// <summary>
        /// true to include feedback entries for the master account and all subaccounts.
        /// </summary>
        public bool? IncludeSubaccounts { get; set; }
        /// <summary>
        /// The URL that Twilio will request when the Feedback Summary is completed.
        /// </summary>
        public Uri StatusCallback { get; set; }
        /// <summary>
        /// The HTTP method Twilio will use to make requests to the StatusCallback URL.
        /// </summary>
        public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

        /// <summary>
        /// Construct a new CreateFeedbackSummaryOptions
        /// </summary>
        /// <param name="startDate"> Only include usage that has occurred on or after this date. </param>
        /// <param name="endDate"> Only include usage that has occurred on or before this date. </param>
        public CreateFeedbackSummaryOptions(DateTime? startDate, DateTime? endDate)
        {
            StartDate = startDate;
            EndDate = endDate;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (StartDate != null)
            {
                p.Add(new KeyValuePair<string, string>("StartDate", StartDate.Value.ToString("yyyy-MM-dd")));
            }

            if (EndDate != null)
            {
                p.Add(new KeyValuePair<string, string>("EndDate", EndDate.Value.ToString("yyyy-MM-dd")));
            }

            if (IncludeSubaccounts != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeSubaccounts", IncludeSubaccounts.Value.ToString().ToLower()));
            }

            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }

            if (StatusCallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchFeedbackSummaryOptions
    /// </summary>
    public class FetchFeedbackSummaryOptions : IOptions<FeedbackSummaryResource> 
    {
        /// <summary>
        /// The account_sid
        /// </summary>
        public string PathAccountSid { get; set; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchFeedbackSummaryOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public FetchFeedbackSummaryOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// DeleteFeedbackSummaryOptions
    /// </summary>
    public class DeleteFeedbackSummaryOptions : IOptions<FeedbackSummaryResource> 
    {
        /// <summary>
        /// The account_sid
        /// </summary>
        public string PathAccountSid { get; set; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteFeedbackSummaryOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public DeleteFeedbackSummaryOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}