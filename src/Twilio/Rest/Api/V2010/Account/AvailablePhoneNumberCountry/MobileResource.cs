/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// MobileResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Api.V2010.Account.AvailablePhoneNumberCountry 
{

    public class MobileResource : Resource 
    {
        private static Request BuildReadRequest(ReadMobileOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                "/2010-04-01/Accounts/" + (options.PathAccountSid ?? client.AccountSid) + "/AvailablePhoneNumbers/" + options.PathCountryCode + "/Mobile.json",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Mobile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Mobile </returns> 
        public static ResourceSet<MobileResource> Read(ReadMobileOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<MobileResource>.FromJson("available_phone_numbers", response.Content);
            return new ResourceSet<MobileResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Mobile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Mobile </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<MobileResource>> ReadAsync(ReadMobileOptions options, 
                                                                                               ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<MobileResource>.FromJson("available_phone_numbers", response.Content);
            return new ResourceSet<MobileResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathCountryCode"> The country_code </param>
        /// <param name="pathAccountSid"> The account_sid </param>
        /// <param name="areaCode"> Find phone numbers in the specified area code. </param>
        /// <param name="contains"> A pattern on which to match phone numbers. </param>
        /// <param name="smsEnabled"> This indicates whether the phone numbers can receive text messages. </param>
        /// <param name="mmsEnabled"> This indicates whether the phone numbers can receive MMS messages. </param>
        /// <param name="voiceEnabled"> This indicates whether the phone numbers can receive calls. </param>
        /// <param name="excludeAllAddressRequired"> Indicates whether the response includes phone numbers which require any
        ///                                 Address. </param>
        /// <param name="excludeLocalAddressRequired"> Indicates whether the response includes phone numbers which require a
        ///                                   local Address. </param>
        /// <param name="excludeForeignAddressRequired"> Indicates whether the response includes phone numbers which require a
        ///                                     foreign Address. </param>
        /// <param name="beta"> Include phone numbers new to the Twilio platform. </param>
        /// <param name="nearNumber"> Given a phone number, find a geographically close number within Distance miles.
        ///                  (US/Canada only) </param>
        /// <param name="nearLatLong"> Given a latitude/longitude pair lat,long find geographically close numbers within
        ///                   Distance miles. (US/Canada only) </param>
        /// <param name="distance"> Specifies the search radius for a Near- query in miles. (US/Canada only) </param>
        /// <param name="inPostalCode"> Limit results to a particular postal code. (US/Canada only) </param>
        /// <param name="inRegion"> Limit results to a particular region. (US/Canada only) </param>
        /// <param name="inRateCenter"> Limit results to a specific rate center, or given a phone number search within the same
        ///                    rate center as that number. (US/Canada only) </param>
        /// <param name="inLata"> Limit results to a specific Local access and transport area. (US/Canada only) </param>
        /// <param name="inLocality"> Limit results to a particular locality. </param>
        /// <param name="faxEnabled"> This indicates whether the phone numbers can receive faxes. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Mobile </returns> 
        public static ResourceSet<MobileResource> Read(string pathCountryCode, 
                                                       string pathAccountSid = null, 
                                                       int? areaCode = null, 
                                                       string contains = null, 
                                                       bool? smsEnabled = null, 
                                                       bool? mmsEnabled = null, 
                                                       bool? voiceEnabled = null, 
                                                       bool? excludeAllAddressRequired = null, 
                                                       bool? excludeLocalAddressRequired = null, 
                                                       bool? excludeForeignAddressRequired = null, 
                                                       bool? beta = null, 
                                                       Types.PhoneNumber nearNumber = null, 
                                                       string nearLatLong = null, 
                                                       int? distance = null, 
                                                       string inPostalCode = null, 
                                                       string inRegion = null, 
                                                       string inRateCenter = null, 
                                                       string inLata = null, 
                                                       string inLocality = null, 
                                                       bool? faxEnabled = null, 
                                                       int? pageSize = null, 
                                                       long? limit = null, 
                                                       ITwilioRestClient client = null)
        {
            var options = new ReadMobileOptions(pathCountryCode){PathAccountSid = pathAccountSid, AreaCode = areaCode, Contains = contains, SmsEnabled = smsEnabled, MmsEnabled = mmsEnabled, VoiceEnabled = voiceEnabled, ExcludeAllAddressRequired = excludeAllAddressRequired, ExcludeLocalAddressRequired = excludeLocalAddressRequired, ExcludeForeignAddressRequired = excludeForeignAddressRequired, Beta = beta, NearNumber = nearNumber, NearLatLong = nearLatLong, Distance = distance, InPostalCode = inPostalCode, InRegion = inRegion, InRateCenter = inRateCenter, InLata = inLata, InLocality = inLocality, FaxEnabled = faxEnabled, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathCountryCode"> The country_code </param>
        /// <param name="pathAccountSid"> The account_sid </param>
        /// <param name="areaCode"> Find phone numbers in the specified area code. </param>
        /// <param name="contains"> A pattern on which to match phone numbers. </param>
        /// <param name="smsEnabled"> This indicates whether the phone numbers can receive text messages. </param>
        /// <param name="mmsEnabled"> This indicates whether the phone numbers can receive MMS messages. </param>
        /// <param name="voiceEnabled"> This indicates whether the phone numbers can receive calls. </param>
        /// <param name="excludeAllAddressRequired"> Indicates whether the response includes phone numbers which require any
        ///                                 Address. </param>
        /// <param name="excludeLocalAddressRequired"> Indicates whether the response includes phone numbers which require a
        ///                                   local Address. </param>
        /// <param name="excludeForeignAddressRequired"> Indicates whether the response includes phone numbers which require a
        ///                                     foreign Address. </param>
        /// <param name="beta"> Include phone numbers new to the Twilio platform. </param>
        /// <param name="nearNumber"> Given a phone number, find a geographically close number within Distance miles.
        ///                  (US/Canada only) </param>
        /// <param name="nearLatLong"> Given a latitude/longitude pair lat,long find geographically close numbers within
        ///                   Distance miles. (US/Canada only) </param>
        /// <param name="distance"> Specifies the search radius for a Near- query in miles. (US/Canada only) </param>
        /// <param name="inPostalCode"> Limit results to a particular postal code. (US/Canada only) </param>
        /// <param name="inRegion"> Limit results to a particular region. (US/Canada only) </param>
        /// <param name="inRateCenter"> Limit results to a specific rate center, or given a phone number search within the same
        ///                    rate center as that number. (US/Canada only) </param>
        /// <param name="inLata"> Limit results to a specific Local access and transport area. (US/Canada only) </param>
        /// <param name="inLocality"> Limit results to a particular locality. </param>
        /// <param name="faxEnabled"> This indicates whether the phone numbers can receive faxes. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Mobile </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<MobileResource>> ReadAsync(string pathCountryCode, 
                                                                                               string pathAccountSid = null, 
                                                                                               int? areaCode = null, 
                                                                                               string contains = null, 
                                                                                               bool? smsEnabled = null, 
                                                                                               bool? mmsEnabled = null, 
                                                                                               bool? voiceEnabled = null, 
                                                                                               bool? excludeAllAddressRequired = null, 
                                                                                               bool? excludeLocalAddressRequired = null, 
                                                                                               bool? excludeForeignAddressRequired = null, 
                                                                                               bool? beta = null, 
                                                                                               Types.PhoneNumber nearNumber = null, 
                                                                                               string nearLatLong = null, 
                                                                                               int? distance = null, 
                                                                                               string inPostalCode = null, 
                                                                                               string inRegion = null, 
                                                                                               string inRateCenter = null, 
                                                                                               string inLata = null, 
                                                                                               string inLocality = null, 
                                                                                               bool? faxEnabled = null, 
                                                                                               int? pageSize = null, 
                                                                                               long? limit = null, 
                                                                                               ITwilioRestClient client = null)
        {
            var options = new ReadMobileOptions(pathCountryCode){PathAccountSid = pathAccountSid, AreaCode = areaCode, Contains = contains, SmsEnabled = smsEnabled, MmsEnabled = mmsEnabled, VoiceEnabled = voiceEnabled, ExcludeAllAddressRequired = excludeAllAddressRequired, ExcludeLocalAddressRequired = excludeLocalAddressRequired, ExcludeForeignAddressRequired = excludeForeignAddressRequired, Beta = beta, NearNumber = nearNumber, NearLatLong = nearLatLong, Distance = distance, InPostalCode = inPostalCode, InRegion = inRegion, InRateCenter = inRateCenter, InLata = inLata, InLocality = inLocality, FaxEnabled = faxEnabled, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<MobileResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<MobileResource>.FromJson("available_phone_numbers", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<MobileResource> NextPage(Page<MobileResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Api,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<MobileResource>.FromJson("available_phone_numbers", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<MobileResource> PreviousPage(Page<MobileResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Api,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<MobileResource>.FromJson("available_phone_numbers", response.Content);
        }

        /// <summary>
        /// Converts a JSON string into a MobileResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> MobileResource object represented by the provided JSON </returns> 
        public static MobileResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<MobileResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// A nicely-formatted version of the phone number.
        /// </summary>
        [JsonProperty("friendly_name")]
        [JsonConverter(typeof(PhoneNumberConverter))]
        public Types.PhoneNumber FriendlyName { get; private set; }
        /// <summary>
        /// The phone number, in E.164 format.
        /// </summary>
        [JsonProperty("phone_number")]
        [JsonConverter(typeof(PhoneNumberConverter))]
        public Types.PhoneNumber PhoneNumber { get; private set; }
        /// <summary>
        /// The LATA of this phone number.
        /// </summary>
        [JsonProperty("lata")]
        public string Lata { get; private set; }
        /// <summary>
        /// The locality/city of this phone number.
        /// </summary>
        [JsonProperty("locality")]
        public string Locality { get; private set; }
        /// <summary>
        /// The rate center of this phone number.
        /// </summary>
        [JsonProperty("rate_center")]
        public string RateCenter { get; private set; }
        /// <summary>
        /// The latitude coordinate of this phone number.
        /// </summary>
        [JsonProperty("latitude")]
        public decimal? Latitude { get; private set; }
        /// <summary>
        /// The longitude coordinate of this phone number.
        /// </summary>
        [JsonProperty("longitude")]
        public decimal? Longitude { get; private set; }
        /// <summary>
        /// The two-letter state or province abbreviation of this phone number.
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; private set; }
        /// <summary>
        /// The postal code of this phone number.
        /// </summary>
        [JsonProperty("postal_code")]
        public string PostalCode { get; private set; }
        /// <summary>
        /// The ISO country code of this phone number.
        /// </summary>
        [JsonProperty("iso_country")]
        public string IsoCountry { get; private set; }
        /// <summary>
        /// This indicates whether the phone number requires you or your customer to have an Address registered with Twilio.
        /// </summary>
        [JsonProperty("address_requirements")]
        public string AddressRequirements { get; private set; }
        /// <summary>
        /// Phone numbers new to the Twilio platform are marked as beta.
        /// </summary>
        [JsonProperty("beta")]
        public bool? Beta { get; private set; }
        /// <summary>
        /// This is a set of boolean properties that indicate whether a phone number can receive calls or messages.
        /// </summary>
        [JsonProperty("capabilities")]
        public PhoneNumberCapabilities Capabilities { get; private set; }

        private MobileResource()
        {

        }
    }

}