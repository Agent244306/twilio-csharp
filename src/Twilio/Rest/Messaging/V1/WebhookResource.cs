/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
/// 
/// WebhookResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Messaging.V1 
{

    public class WebhookResource : Resource 
    {
        private static Request BuildFetchRequest(FetchWebhookOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Messaging,
                "/v1/Sessions/Webhooks",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Webhook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Webhook </returns> 
        public static WebhookResource Fetch(FetchWebhookOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Webhook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Webhook </returns> 
        public static async System.Threading.Tasks.Task<WebhookResource> FetchAsync(FetchWebhookOptions options, 
                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Webhook </returns> 
        public static WebhookResource Fetch(ITwilioRestClient client = null)
        {
            var options = new FetchWebhookOptions();
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Webhook </returns> 
        public static async System.Threading.Tasks.Task<WebhookResource> FetchAsync(ITwilioRestClient client = null)
        {
            var options = new FetchWebhookOptions();
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildUpdateRequest(UpdateWebhookOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Messaging,
                "/v1/Sessions/Webhooks",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Webhook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Webhook </returns> 
        public static WebhookResource Update(UpdateWebhookOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Webhook parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Webhook </returns> 
        public static async System.Threading.Tasks.Task<WebhookResource> UpdateAsync(UpdateWebhookOptions options, 
                                                                                     ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="webhookMethod"> The HTTP method to be used when sending a webhook request. </param>
        /// <param name="webhookFilters"> The list of webhook event triggers that are enabled for this Service. </param>
        /// <param name="preWebhookUrl"> The absolute url the pre-event webhook request should be sent to. </param>
        /// <param name="postWebhookUrl"> The absolute url the post-event webhook request should be sent to. </param>
        /// <param name="preWebhookRetryCount"> The number of retries in case of pre-event webhook request failures. </param>
        /// <param name="postWebhookRetryCount"> The number of retries in case of post-event webhook request failures. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Webhook </returns> 
        public static WebhookResource Update(string webhookMethod = null, 
                                             List<string> webhookFilters = null, 
                                             string preWebhookUrl = null, 
                                             string postWebhookUrl = null, 
                                             int? preWebhookRetryCount = null, 
                                             int? postWebhookRetryCount = null, 
                                             ITwilioRestClient client = null)
        {
            var options = new UpdateWebhookOptions(){WebhookMethod = webhookMethod, WebhookFilters = webhookFilters, PreWebhookUrl = preWebhookUrl, PostWebhookUrl = postWebhookUrl, PreWebhookRetryCount = preWebhookRetryCount, PostWebhookRetryCount = postWebhookRetryCount};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="webhookMethod"> The HTTP method to be used when sending a webhook request. </param>
        /// <param name="webhookFilters"> The list of webhook event triggers that are enabled for this Service. </param>
        /// <param name="preWebhookUrl"> The absolute url the pre-event webhook request should be sent to. </param>
        /// <param name="postWebhookUrl"> The absolute url the post-event webhook request should be sent to. </param>
        /// <param name="preWebhookRetryCount"> The number of retries in case of pre-event webhook request failures. </param>
        /// <param name="postWebhookRetryCount"> The number of retries in case of post-event webhook request failures. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Webhook </returns> 
        public static async System.Threading.Tasks.Task<WebhookResource> UpdateAsync(string webhookMethod = null, 
                                                                                     List<string> webhookFilters = null, 
                                                                                     string preWebhookUrl = null, 
                                                                                     string postWebhookUrl = null, 
                                                                                     int? preWebhookRetryCount = null, 
                                                                                     int? postWebhookRetryCount = null, 
                                                                                     ITwilioRestClient client = null)
        {
            var options = new UpdateWebhookOptions(){WebhookMethod = webhookMethod, WebhookFilters = webhookFilters, PreWebhookUrl = preWebhookUrl, PostWebhookUrl = postWebhookUrl, PreWebhookRetryCount = preWebhookRetryCount, PostWebhookRetryCount = postWebhookRetryCount};
            return await UpdateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a WebhookResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> WebhookResource object represented by the provided JSON </returns> 
        public static WebhookResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<WebhookResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique id of the Account responsible for this session.
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The unique id of the Chat Service this session belongs to.
        /// </summary>
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }
        /// <summary>
        /// The HTTP method to be used when sending a webhook request.
        /// </summary>
        [JsonProperty("webhook_method")]
        public string WebhookMethod { get; private set; }
        /// <summary>
        /// The list of webhook event triggers that are enabled for this Service.
        /// </summary>
        [JsonProperty("webhook_filters")]
        public List<string> WebhookFilters { get; private set; }
        /// <summary>
        /// The absolute url the pre-event webhook request should be sent to.
        /// </summary>
        [JsonProperty("pre_webhook_url")]
        public string PreWebhookUrl { get; private set; }
        /// <summary>
        /// The absolute url the post-event webhook request should be sent to.
        /// </summary>
        [JsonProperty("post_webhook_url")]
        public string PostWebhookUrl { get; private set; }
        /// <summary>
        /// The number of retries in case of pre-event webhook request failures.
        /// </summary>
        [JsonProperty("pre_webhook_retry_count")]
        public int? PreWebhookRetryCount { get; private set; }
        /// <summary>
        /// The number of retries in case of post-event webhook request failures.
        /// </summary>
        [JsonProperty("post_webhook_retry_count")]
        public int? PostWebhookRetryCount { get; private set; }
        /// <summary>
        /// An absolute URL for this webhook.
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private WebhookResource()
        {

        }
    }

}