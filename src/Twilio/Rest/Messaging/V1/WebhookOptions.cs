/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Messaging.V1 
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// FetchWebhookOptions
    /// </summary>
    public class FetchWebhookOptions : IOptions<WebhookResource> 
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// UpdateWebhookOptions
    /// </summary>
    public class UpdateWebhookOptions : IOptions<WebhookResource> 
    {
        /// <summary>
        /// The HTTP method to be used when sending a webhook request.
        /// </summary>
        public string WebhookMethod { get; set; }
        /// <summary>
        /// The list of webhook event triggers that are enabled for this Service.
        /// </summary>
        public List<string> WebhookFilters { get; set; }
        /// <summary>
        /// The absolute url the pre-event webhook request should be sent to.
        /// </summary>
        public string PreWebhookUrl { get; set; }
        /// <summary>
        /// The absolute url the post-event webhook request should be sent to.
        /// </summary>
        public string PostWebhookUrl { get; set; }
        /// <summary>
        /// The number of retries in case of pre-event webhook request failures.
        /// </summary>
        public int? PreWebhookRetryCount { get; set; }
        /// <summary>
        /// The number of retries in case of post-event webhook request failures.
        /// </summary>
        public int? PostWebhookRetryCount { get; set; }
        /// <summary>
        /// The routing target of the webhook.
        /// </summary>
        public WebhookResource.TargetEnum Target { get; set; }

        /// <summary>
        /// Construct a new UpdateWebhookOptions
        /// </summary>
        public UpdateWebhookOptions()
        {
            WebhookFilters = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (WebhookMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhookMethod", WebhookMethod));
            }

            if (WebhookFilters != null)
            {
                p.AddRange(WebhookFilters.Select(prop => new KeyValuePair<string, string>("WebhookFilters", prop)));
            }

            if (PreWebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("PreWebhookUrl", PreWebhookUrl));
            }

            if (PostWebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("PostWebhookUrl", PostWebhookUrl));
            }

            if (PreWebhookRetryCount != null)
            {
                p.Add(new KeyValuePair<string, string>("PreWebhookRetryCount", PreWebhookRetryCount.ToString()));
            }

            if (PostWebhookRetryCount != null)
            {
                p.Add(new KeyValuePair<string, string>("PostWebhookRetryCount", PostWebhookRetryCount.ToString()));
            }

            if (Target != null)
            {
                p.Add(new KeyValuePair<string, string>("Target", Target.ToString()));
            }

            return p;
        }
    }

}