/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Notify.V1.Service 
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// FetchBindingOptions
    /// </summary>
    public class FetchBindingOptions : IOptions<BindingResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchBindingOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathSid"> The sid </param>
        public FetchBindingOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// DeleteBindingOptions
    /// </summary>
    public class DeleteBindingOptions : IOptions<BindingResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteBindingOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathSid"> The sid </param>
        public DeleteBindingOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// CreateBindingOptions
    /// </summary>
    public class CreateBindingOptions : IOptions<BindingResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The Identity to which this Binding belongs to.
        /// </summary>
        public string Identity { get; }
        /// <summary>
        /// The type of the Binding.
        /// </summary>
        public BindingResource.BindingTypeEnum BindingType { get; }
        /// <summary>
        /// The address specific to the channel.
        /// </summary>
        public string Address { get; }
        /// <summary>
        /// The list of tags associated with this Binding.
        /// </summary>
        public List<string> Tag { get; set; }
        /// <summary>
        /// The version of the protocol used to send the notification.
        /// </summary>
        public string NotificationProtocolVersion { get; set; }
        /// <summary>
        /// The unique identifier of the Credential resource to be used to send notifications to this Binding.
        /// </summary>
        public string CredentialSid { get; set; }
        /// <summary>
        /// DEPRECATED*
        /// </summary>
        public string Endpoint { get; set; }

        /// <summary>
        /// Construct a new CreateBindingOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="identity"> The Identity to which this Binding belongs to. </param>
        /// <param name="bindingType"> The type of the Binding. </param>
        /// <param name="address"> The address specific to the channel. </param>
        public CreateBindingOptions(string pathServiceSid, 
                                    string identity, 
                                    BindingResource.BindingTypeEnum bindingType, 
                                    string address)
        {
            PathServiceSid = pathServiceSid;
            Identity = identity;
            BindingType = bindingType;
            Address = address;
            Tag = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Identity != null)
            {
                p.Add(new KeyValuePair<string, string>("Identity", Identity));
            }

            if (BindingType != null)
            {
                p.Add(new KeyValuePair<string, string>("BindingType", BindingType.ToString()));
            }

            if (Address != null)
            {
                p.Add(new KeyValuePair<string, string>("Address", Address));
            }

            if (Tag != null)
            {
                p.AddRange(Tag.Select(prop => new KeyValuePair<string, string>("Tag", prop)));
            }

            if (NotificationProtocolVersion != null)
            {
                p.Add(new KeyValuePair<string, string>("NotificationProtocolVersion", NotificationProtocolVersion));
            }

            if (CredentialSid != null)
            {
                p.Add(new KeyValuePair<string, string>("CredentialSid", CredentialSid.ToString()));
            }

            if (Endpoint != null)
            {
                p.Add(new KeyValuePair<string, string>("Endpoint", Endpoint));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// ReadBindingOptions
    /// </summary>
    public class ReadBindingOptions : ReadOptions<BindingResource> 
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// Only list Bindings created on or after the given date.
        /// </summary>
        public DateTime? StartDate { get; set; }
        /// <summary>
        /// Only list Bindings created on or before the given date.
        /// </summary>
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// Only list Bindings that have any of the specified Identities.
        /// </summary>
        public List<string> Identity { get; set; }
        /// <summary>
        /// Only list Bindings that have all of the specified Tags.
        /// </summary>
        public List<string> Tag { get; set; }

        /// <summary>
        /// Construct a new ReadBindingOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        public ReadBindingOptions(string pathServiceSid)
        {
            PathServiceSid = pathServiceSid;
            Identity = new List<string>();
            Tag = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (StartDate != null)
            {
                p.Add(new KeyValuePair<string, string>("StartDate", StartDate.Value.ToString("yyyy-MM-dd")));
            }

            if (EndDate != null)
            {
                p.Add(new KeyValuePair<string, string>("EndDate", EndDate.Value.ToString("yyyy-MM-dd")));
            }

            if (Identity != null)
            {
                p.AddRange(Identity.Select(prop => new KeyValuePair<string, string>("Identity", prop)));
            }

            if (Tag != null)
            {
                p.AddRange(Tag.Select(prop => new KeyValuePair<string, string>("Tag", prop)));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

}