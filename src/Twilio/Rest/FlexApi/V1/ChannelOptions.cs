/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.FlexApi.V1
{

    /// <summary>
    /// ReadChannelOptions
    /// </summary>
    public class ReadChannelOptions : ReadOptions<ChannelResource>
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchChannelOptions
    /// </summary>
    public class FetchChannelOptions : IOptions<ChannelResource>
    {
        /// <summary>
        /// Flex Chat Channel Sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchChannelOptions
        /// </summary>
        /// <param name="pathSid"> Flex Chat Channel Sid </param>
        public FetchChannelOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// CreateChannelOptions
    /// </summary>
    public class CreateChannelOptions : IOptions<ChannelResource>
    {
        /// <summary>
        /// The unique ID of the FlexFlow
        /// </summary>
        public string FlexFlowSid { get; }
        /// <summary>
        /// Chat User identity
        /// </summary>
        public string Identity { get; }
        /// <summary>
        /// Customer friendly name
        /// </summary>
        public string ChatUserFriendlyName { get; }
        /// <summary>
        /// Chat channel friendly name
        /// </summary>
        public string ChatFriendlyName { get; }
        /// <summary>
        /// Target Contact Identity
        /// </summary>
        public string Target { get; set; }
        /// <summary>
        /// Chat channel unique name
        /// </summary>
        public string ChatUniqueName { get; set; }
        /// <summary>
        /// Pre-engagement data
        /// </summary>
        public string PreEngagementData { get; set; }
        /// <summary>
        /// TaskRouter Task Sid.
        /// </summary>
        public string TaskSid { get; set; }
        /// <summary>
        /// Task attributes to be added for the TaskRouter Task
        /// </summary>
        public string TaskAttributes { get; set; }
        /// <summary>
        /// Long Lived flag
        /// </summary>
        public bool? LongLived { get; set; }

        /// <summary>
        /// Construct a new CreateChannelOptions
        /// </summary>
        /// <param name="flexFlowSid"> The unique ID of the FlexFlow </param>
        /// <param name="identity"> Chat User identity </param>
        /// <param name="chatUserFriendlyName"> Customer friendly name </param>
        /// <param name="chatFriendlyName"> Chat channel friendly name </param>
        public CreateChannelOptions(string flexFlowSid,
                                    string identity,
                                    string chatUserFriendlyName,
                                    string chatFriendlyName)
        {
            FlexFlowSid = flexFlowSid;
            Identity = identity;
            ChatUserFriendlyName = chatUserFriendlyName;
            ChatFriendlyName = chatFriendlyName;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FlexFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("FlexFlowSid", FlexFlowSid.ToString()));
            }

            if (Identity != null)
            {
                p.Add(new KeyValuePair<string, string>("Identity", Identity));
            }

            if (ChatUserFriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatUserFriendlyName", ChatUserFriendlyName));
            }

            if (ChatFriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatFriendlyName", ChatFriendlyName));
            }

            if (Target != null)
            {
                p.Add(new KeyValuePair<string, string>("Target", Target));
            }

            if (ChatUniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatUniqueName", ChatUniqueName));
            }

            if (PreEngagementData != null)
            {
                p.Add(new KeyValuePair<string, string>("PreEngagementData", PreEngagementData));
            }

            if (TaskSid != null)
            {
                p.Add(new KeyValuePair<string, string>("TaskSid", TaskSid.ToString()));
            }

            if (TaskAttributes != null)
            {
                p.Add(new KeyValuePair<string, string>("TaskAttributes", TaskAttributes));
            }

            if (LongLived != null)
            {
                p.Add(new KeyValuePair<string, string>("LongLived", LongLived.Value.ToString().ToLower()));
            }

            return p;
        }
    }

    /// <summary>
    /// DeleteChannelOptions
    /// </summary>
    public class DeleteChannelOptions : IOptions<ChannelResource>
    {
        /// <summary>
        /// Flex Chat Channel Sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteChannelOptions
        /// </summary>
        /// <param name="pathSid"> Flex Chat Channel Sid </param>
        public DeleteChannelOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}