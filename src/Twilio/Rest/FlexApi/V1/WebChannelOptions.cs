/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.FlexApi.V1
{

    /// <summary>
    /// ReadWebChannelOptions
    /// </summary>
    public class ReadWebChannelOptions : ReadOptions<WebChannelResource>
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchWebChannelOptions
    /// </summary>
    public class FetchWebChannelOptions : IOptions<WebChannelResource>
    {
        /// <summary>
        /// Flex Chat Channel Sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchWebChannelOptions
        /// </summary>
        /// <param name="pathSid"> Flex Chat Channel Sid </param>
        public FetchWebChannelOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// CreateWebChannelOptions
    /// </summary>
    public class CreateWebChannelOptions : IOptions<WebChannelResource>
    {
        /// <summary>
        /// The unique ID of the FlexFlow
        /// </summary>
        public string FlexFlowSid { get; }
        /// <summary>
        /// Chat identity
        /// </summary>
        public string Identity { get; }
        /// <summary>
        /// Customer friendly name
        /// </summary>
        public string CustomerFriendlyName { get; }
        /// <summary>
        /// Chat channel friendly name
        /// </summary>
        public string ChatFriendlyName { get; }
        /// <summary>
        /// Chat channel unique name
        /// </summary>
        public string ChatUniqueName { get; set; }
        /// <summary>
        /// Pre-engagement data
        /// </summary>
        public string PreEngagementData { get; set; }

        /// <summary>
        /// Construct a new CreateWebChannelOptions
        /// </summary>
        /// <param name="flexFlowSid"> The unique ID of the FlexFlow </param>
        /// <param name="identity"> Chat identity </param>
        /// <param name="customerFriendlyName"> Customer friendly name </param>
        /// <param name="chatFriendlyName"> Chat channel friendly name </param>
        public CreateWebChannelOptions(string flexFlowSid,
                                       string identity,
                                       string customerFriendlyName,
                                       string chatFriendlyName)
        {
            FlexFlowSid = flexFlowSid;
            Identity = identity;
            CustomerFriendlyName = customerFriendlyName;
            ChatFriendlyName = chatFriendlyName;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FlexFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("FlexFlowSid", FlexFlowSid.ToString()));
            }

            if (Identity != null)
            {
                p.Add(new KeyValuePair<string, string>("Identity", Identity));
            }

            if (CustomerFriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("CustomerFriendlyName", CustomerFriendlyName));
            }

            if (ChatFriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatFriendlyName", ChatFriendlyName));
            }

            if (ChatUniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatUniqueName", ChatUniqueName));
            }

            if (PreEngagementData != null)
            {
                p.Add(new KeyValuePair<string, string>("PreEngagementData", PreEngagementData));
            }

            return p;
        }
    }

    /// <summary>
    /// UpdateWebChannelOptions
    /// </summary>
    public class UpdateWebChannelOptions : IOptions<WebChannelResource>
    {
        /// <summary>
        /// Channel Sid.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// Chat status
        /// </summary>
        public WebChannelResource.ChatStatusEnum ChatStatus { get; set; }
        /// <summary>
        /// Post-engagement data
        /// </summary>
        public string PostEngagementData { get; set; }

        /// <summary>
        /// Construct a new UpdateWebChannelOptions
        /// </summary>
        /// <param name="pathSid"> Channel Sid. </param>
        public UpdateWebChannelOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (ChatStatus != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatStatus", ChatStatus.ToString()));
            }

            if (PostEngagementData != null)
            {
                p.Add(new KeyValuePair<string, string>("PostEngagementData", PostEngagementData));
            }

            return p;
        }
    }

    /// <summary>
    /// DeleteWebChannelOptions
    /// </summary>
    public class DeleteWebChannelOptions : IOptions<WebChannelResource>
    {
        /// <summary>
        /// Flex Chat Channel Sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteWebChannelOptions
        /// </summary>
        /// <param name="pathSid"> Flex Chat Channel Sid </param>
        public DeleteWebChannelOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}