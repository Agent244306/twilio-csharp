/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// ConfigurationResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.FlexApi.V1
{

    public class ConfigurationResource : Resource
    {
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }

            public static readonly StatusEnum Ok = new StatusEnum("ok");
            public static readonly StatusEnum Inprogress = new StatusEnum("inprogress");
            public static readonly StatusEnum Notstarted = new StatusEnum("notstarted");
        }

        private static Request BuildFetchRequest(FetchConfigurationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                "/v1/Configuration",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Configuration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Configuration </returns>
        public static ConfigurationResource Fetch(FetchConfigurationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Configuration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Configuration </returns>
        public static async System.Threading.Tasks.Task<ConfigurationResource> FetchAsync(FetchConfigurationOptions options,
                                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="uiVersion"> Pinned UI version </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Configuration </returns>
        public static ConfigurationResource Fetch(string uiVersion = null, ITwilioRestClient client = null)
        {
            var options = new FetchConfigurationOptions(){UiVersion = uiVersion};
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="uiVersion"> Pinned UI version </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Configuration </returns>
        public static async System.Threading.Tasks.Task<ConfigurationResource> FetchAsync(string uiVersion = null,
                                                                                          ITwilioRestClient client = null)
        {
            var options = new FetchConfigurationOptions(){UiVersion = uiVersion};
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildCreateRequest(CreateConfigurationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                "/v1/Configuration",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create Configuration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Configuration </returns>
        public static ConfigurationResource Create(CreateConfigurationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create Configuration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Configuration </returns>
        public static async System.Threading.Tasks.Task<ConfigurationResource> CreateAsync(CreateConfigurationOptions options,
                                                                                           ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// create
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Configuration </returns>
        public static ConfigurationResource Create(ITwilioRestClient client = null)
        {
            var options = new CreateConfigurationOptions();
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Configuration </returns>
        public static async System.Threading.Tasks.Task<ConfigurationResource> CreateAsync(ITwilioRestClient client = null)
        {
            var options = new CreateConfigurationOptions();
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildUpdateRequest(UpdateConfigurationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.FlexApi,
                "/v1/Configuration",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Configuration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Configuration </returns>
        public static ConfigurationResource Update(UpdateConfigurationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Configuration parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Configuration </returns>
        public static async System.Threading.Tasks.Task<ConfigurationResource> UpdateAsync(UpdateConfigurationOptions options,
                                                                                           ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Configuration </returns>
        public static ConfigurationResource Update(ITwilioRestClient client = null)
        {
            var options = new UpdateConfigurationOptions();
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Configuration </returns>
        public static async System.Threading.Tasks.Task<ConfigurationResource> UpdateAsync(ITwilioRestClient client = null)
        {
            var options = new UpdateConfigurationOptions();
            return await UpdateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a ConfigurationResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ConfigurationResource object represented by the provided JSON </returns>
        public static ConfigurationResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<ConfigurationResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique id of the Account responsible for this configuration
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The time the Configuration was created, given as GMT in ISO 8601 format
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The time the Configuration was last updated, given as GMT in ISO 8601 format
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// Attiributes
        /// </summary>
        [JsonProperty("attributes")]
        public object Attributes { get; private set; }
        /// <summary>
        /// Status of the Flex onboarding
        /// </summary>
        [JsonProperty("status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public ConfigurationResource.StatusEnum Status { get; private set; }
        /// <summary>
        /// The unique ID of the TaskRouter Workspace
        /// </summary>
        [JsonProperty("taskrouter_workspace_sid")]
        public string TaskrouterWorkspaceSid { get; private set; }
        /// <summary>
        /// The unique ID of the TaskRouter Target Workflow
        /// </summary>
        [JsonProperty("taskrouter_target_workflow_sid")]
        public string TaskrouterTargetWorkflowSid { get; private set; }
        /// <summary>
        /// The unique ID of the TaskRouter Target TaskQueue
        /// </summary>
        [JsonProperty("taskrouter_target_taskqueue_sid")]
        public string TaskrouterTargetTaskqueueSid { get; private set; }
        /// <summary>
        /// Array of TaskRouter TaskQueues
        /// </summary>
        [JsonProperty("taskrouter_taskqueues")]
        public List<object> TaskrouterTaskqueues { get; private set; }
        /// <summary>
        /// Skill description for TaskRouter workers
        /// </summary>
        [JsonProperty("taskrouter_skills")]
        public List<object> TaskrouterSkills { get; private set; }
        /// <summary>
        /// TaskRouter default channel capacities and availability for workers
        /// </summary>
        [JsonProperty("taskrouter_worker_channels")]
        public object TaskrouterWorkerChannels { get; private set; }
        /// <summary>
        /// The taskrouter_worker_attributes
        /// </summary>
        [JsonProperty("taskrouter_worker_attributes")]
        public object TaskrouterWorkerAttributes { get; private set; }
        /// <summary>
        /// The unique ID of the offline activity
        /// </summary>
        [JsonProperty("taskrouter_offline_activity_sid")]
        public string TaskrouterOfflineActivitySid { get; private set; }
        /// <summary>
        /// Flex resources hosting URL for the main UI
        /// </summary>
        [JsonProperty("runtime_domain")]
        public Uri RuntimeDomain { get; private set; }
        /// <summary>
        /// Unique 34 character ID of the Messaging Service
        /// </summary>
        [JsonProperty("messaging_service_instance_sid")]
        public string MessagingServiceInstanceSid { get; private set; }
        /// <summary>
        /// The unique id of the Chat Service this user belongs to
        /// </summary>
        [JsonProperty("chat_service_instance_sid")]
        public string ChatServiceInstanceSid { get; private set; }
        /// <summary>
        /// Main language of the Flex UI
        /// </summary>
        [JsonProperty("ui_language")]
        public string UiLanguage { get; private set; }
        /// <summary>
        /// UI Attributes
        /// </summary>
        [JsonProperty("ui_attributes")]
        public object UiAttributes { get; private set; }
        /// <summary>
        /// Pinned UI version
        /// </summary>
        [JsonProperty("ui_version")]
        public string UiVersion { get; private set; }
        /// <summary>
        /// Flex Service version
        /// </summary>
        [JsonProperty("service_version")]
        public string ServiceVersion { get; private set; }
        /// <summary>
        /// Call recording enabled
        /// </summary>
        [JsonProperty("call_recording_enabled")]
        public bool? CallRecordingEnabled { get; private set; }
        /// <summary>
        /// Call recording webhook url
        /// </summary>
        [JsonProperty("call_recording_webhook_url")]
        public Uri CallRecordingWebhookUrl { get; private set; }
        /// <summary>
        /// Flag indicating whether CRM is present for Flex
        /// </summary>
        [JsonProperty("crm_enabled")]
        public bool? CrmEnabled { get; private set; }
        /// <summary>
        /// CRM Type
        /// </summary>
        [JsonProperty("crm_type")]
        public string CrmType { get; private set; }
        /// <summary>
        /// CRM Callback URL
        /// </summary>
        [JsonProperty("crm_callback_url")]
        public Uri CrmCallbackUrl { get; private set; }
        /// <summary>
        /// CRM Fallback URL
        /// </summary>
        [JsonProperty("crm_fallback_url")]
        public Uri CrmFallbackUrl { get; private set; }
        /// <summary>
        /// CRM Attributes
        /// </summary>
        [JsonProperty("crm_attributes")]
        public object CrmAttributes { get; private set; }
        /// <summary>
        /// Public Attributes
        /// </summary>
        [JsonProperty("public_attributes")]
        public object PublicAttributes { get; private set; }
        /// <summary>
        /// Is plugin service Enabled
        /// </summary>
        [JsonProperty("plugin_service_enabled")]
        public bool? PluginServiceEnabled { get; private set; }
        /// <summary>
        /// Plugin service Attributes
        /// </summary>
        [JsonProperty("plugin_service_attributes")]
        public object PluginServiceAttributes { get; private set; }
        /// <summary>
        /// Integration parameters
        /// </summary>
        [JsonProperty("integrations")]
        public List<object> Integrations { get; private set; }
        /// <summary>
        /// Outbound call flows Attributes
        /// </summary>
        [JsonProperty("outbound_call_flows")]
        public object OutboundCallFlows { get; private set; }
        /// <summary>
        /// The URL for this resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private ConfigurationResource()
        {

        }
    }

}