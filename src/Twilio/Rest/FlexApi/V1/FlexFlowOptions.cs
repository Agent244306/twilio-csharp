/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.FlexApi.V1 
{

    /// <summary>
    /// ReadFlexFlowOptions
    /// </summary>
    public class ReadFlexFlowOptions : ReadOptions<FlexFlowResource> 
    {
        /// <summary>
        /// Human readable description of this FlexFlow
        /// </summary>
        public string FriendlyName { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchFlexFlowOptions
    /// </summary>
    public class FetchFlexFlowOptions : IOptions<FlexFlowResource> 
    {
        /// <summary>
        /// The unique ID of the FlexFlow
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchFlexFlowOptions
        /// </summary>
        /// <param name="pathSid"> The unique ID of the FlexFlow </param>
        public FetchFlexFlowOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// CreateFlexFlowOptions
    /// </summary>
    public class CreateFlexFlowOptions : IOptions<FlexFlowResource> 
    {
        /// <summary>
        /// Human readable description of this FlexFlow
        /// </summary>
        public string FriendlyName { get; }
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string ChatServiceSid { get; }
        /// <summary>
        /// Channel type
        /// </summary>
        public FlexFlowResource.ChannelTypeEnum ChannelType { get; }
        /// <summary>
        /// Channel contact Identity
        /// </summary>
        public string ContactIdentity { get; set; }
        /// <summary>
        /// Boolean flag for enabling or disabling the FlexFlow
        /// </summary>
        public bool? Enabled { get; set; }
        /// <summary>
        /// Integration type
        /// </summary>
        public FlexFlowResource.IntegrationTypeEnum IntegrationType { get; set; }
        /// <summary>
        /// Flow Sid.
        /// </summary>
        public string IntegrationFlowSid { get; set; }
        /// <summary>
        /// External Webhook Url
        /// </summary>
        public Uri IntegrationUrl { get; set; }
        /// <summary>
        /// Workspace Sid for a new task
        /// </summary>
        public string IntegrationWorkspaceSid { get; set; }
        /// <summary>
        /// Workflow Sid for a new task
        /// </summary>
        public string IntegrationWorkflowSid { get; set; }
        /// <summary>
        /// Task Channel for a new task
        /// </summary>
        public string IntegrationChannel { get; set; }
        /// <summary>
        /// Task timeout in seconds for a new task
        /// </summary>
        public int? IntegrationTimeout { get; set; }
        /// <summary>
        /// Task priority for a new task
        /// </summary>
        public int? IntegrationPriority { get; set; }
        /// <summary>
        /// Flag for task creation
        /// </summary>
        public bool? IntegrationCreationOnMessage { get; set; }
        /// <summary>
        /// Long Lived flag for new Channel
        /// </summary>
        public bool? LongLived { get; set; }

        /// <summary>
        /// Construct a new CreateFlexFlowOptions
        /// </summary>
        /// <param name="friendlyName"> Human readable description of this FlexFlow </param>
        /// <param name="chatServiceSid"> Service Sid. </param>
        /// <param name="channelType"> Channel type </param>
        public CreateFlexFlowOptions(string friendlyName, 
                                     string chatServiceSid, 
                                     FlexFlowResource.ChannelTypeEnum channelType)
        {
            FriendlyName = friendlyName;
            ChatServiceSid = chatServiceSid;
            ChannelType = channelType;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (ChatServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatServiceSid", ChatServiceSid.ToString()));
            }

            if (ChannelType != null)
            {
                p.Add(new KeyValuePair<string, string>("ChannelType", ChannelType.ToString()));
            }

            if (ContactIdentity != null)
            {
                p.Add(new KeyValuePair<string, string>("ContactIdentity", ContactIdentity));
            }

            if (Enabled != null)
            {
                p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
            }

            if (IntegrationType != null)
            {
                p.Add(new KeyValuePair<string, string>("IntegrationType", IntegrationType.ToString()));
            }

            if (IntegrationFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.FlowSid", IntegrationFlowSid.ToString()));
            }

            if (IntegrationUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Url", Serializers.Url(IntegrationUrl)));
            }

            if (IntegrationWorkspaceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.WorkspaceSid", IntegrationWorkspaceSid.ToString()));
            }

            if (IntegrationWorkflowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.WorkflowSid", IntegrationWorkflowSid.ToString()));
            }

            if (IntegrationChannel != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Channel", IntegrationChannel));
            }

            if (IntegrationTimeout != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Timeout", IntegrationTimeout.ToString()));
            }

            if (IntegrationPriority != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Priority", IntegrationPriority.ToString()));
            }

            if (IntegrationCreationOnMessage != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.CreationOnMessage", IntegrationCreationOnMessage.Value.ToString().ToLower()));
            }

            if (LongLived != null)
            {
                p.Add(new KeyValuePair<string, string>("LongLived", LongLived.Value.ToString().ToLower()));
            }

            return p;
        }
    }

    /// <summary>
    /// UpdateFlexFlowOptions
    /// </summary>
    public class UpdateFlexFlowOptions : IOptions<FlexFlowResource> 
    {
        /// <summary>
        /// The unique ID of the FlexFlow
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// Human readable description of this FlexFlow
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string ChatServiceSid { get; set; }
        /// <summary>
        /// Channel type
        /// </summary>
        public FlexFlowResource.ChannelTypeEnum ChannelType { get; set; }
        /// <summary>
        /// Channel contact Identity
        /// </summary>
        public string ContactIdentity { get; set; }
        /// <summary>
        /// Boolean flag for enabling or disabling the FlexFlow
        /// </summary>
        public bool? Enabled { get; set; }
        /// <summary>
        /// Integration type
        /// </summary>
        public FlexFlowResource.IntegrationTypeEnum IntegrationType { get; set; }
        /// <summary>
        /// Flow Sid.
        /// </summary>
        public string IntegrationFlowSid { get; set; }
        /// <summary>
        /// External Webhook Url
        /// </summary>
        public Uri IntegrationUrl { get; set; }
        /// <summary>
        /// Workspace Sid for a new task
        /// </summary>
        public string IntegrationWorkspaceSid { get; set; }
        /// <summary>
        /// Workflow Sid for a new task
        /// </summary>
        public string IntegrationWorkflowSid { get; set; }
        /// <summary>
        /// Task Channel for a new task
        /// </summary>
        public string IntegrationChannel { get; set; }
        /// <summary>
        /// Task timeout in seconds for a new task
        /// </summary>
        public int? IntegrationTimeout { get; set; }
        /// <summary>
        /// Task priority for a new task
        /// </summary>
        public int? IntegrationPriority { get; set; }
        /// <summary>
        /// Flag for task creation
        /// </summary>
        public bool? IntegrationCreationOnMessage { get; set; }
        /// <summary>
        /// Long Lived flag for new Channel
        /// </summary>
        public bool? LongLived { get; set; }

        /// <summary>
        /// Construct a new UpdateFlexFlowOptions
        /// </summary>
        /// <param name="pathSid"> The unique ID of the FlexFlow </param>
        public UpdateFlexFlowOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (ChatServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ChatServiceSid", ChatServiceSid.ToString()));
            }

            if (ChannelType != null)
            {
                p.Add(new KeyValuePair<string, string>("ChannelType", ChannelType.ToString()));
            }

            if (ContactIdentity != null)
            {
                p.Add(new KeyValuePair<string, string>("ContactIdentity", ContactIdentity));
            }

            if (Enabled != null)
            {
                p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
            }

            if (IntegrationType != null)
            {
                p.Add(new KeyValuePair<string, string>("IntegrationType", IntegrationType.ToString()));
            }

            if (IntegrationFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.FlowSid", IntegrationFlowSid.ToString()));
            }

            if (IntegrationUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Url", Serializers.Url(IntegrationUrl)));
            }

            if (IntegrationWorkspaceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.WorkspaceSid", IntegrationWorkspaceSid.ToString()));
            }

            if (IntegrationWorkflowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.WorkflowSid", IntegrationWorkflowSid.ToString()));
            }

            if (IntegrationChannel != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Channel", IntegrationChannel));
            }

            if (IntegrationTimeout != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Timeout", IntegrationTimeout.ToString()));
            }

            if (IntegrationPriority != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.Priority", IntegrationPriority.ToString()));
            }

            if (IntegrationCreationOnMessage != null)
            {
                p.Add(new KeyValuePair<string, string>("Integration.CreationOnMessage", IntegrationCreationOnMessage.Value.ToString().ToLower()));
            }

            if (LongLived != null)
            {
                p.Add(new KeyValuePair<string, string>("LongLived", LongLived.Value.ToString().ToLower()));
            }

            return p;
        }
    }

    /// <summary>
    /// DeleteFlexFlowOptions
    /// </summary>
    public class DeleteFlexFlowOptions : IOptions<FlexFlowResource> 
    {
        /// <summary>
        /// The unique ID of the FlexFlow
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteFlexFlowOptions
        /// </summary>
        /// <param name="pathSid"> The unique ID of the FlexFlow </param>
        public DeleteFlexFlowOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}