/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Wireless.V1 
{

    /// <summary>
    /// FetchCommandOptions
    /// </summary>
    public class FetchCommandOptions : IOptions<CommandResource> 
    {
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchCommandOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public FetchCommandOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// ReadCommandOptions
    /// </summary>
    public class ReadCommandOptions : ReadOptions<CommandResource> 
    {
        /// <summary>
        /// Only return Commands to or from this SIM.
        /// </summary>
        public string Sim { get; set; }
        /// <summary>
        /// Only return Commands with this status value.
        /// </summary>
        public CommandResource.StatusEnum Status { get; set; }
        /// <summary>
        /// Only return Commands with this direction value.
        /// </summary>
        public CommandResource.DirectionEnum Direction { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim));
            }

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (Direction != null)
            {
                p.Add(new KeyValuePair<string, string>("Direction", Direction.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// CreateCommandOptions
    /// </summary>
    public class CreateCommandOptions : IOptions<CommandResource> 
    {
        /// <summary>
        /// The message body of the Command or a Base64 encoded byte string in binary mode.
        /// </summary>
        public string Command { get; }
        /// <summary>
        /// The Sid or UniqueName of the SIM to send the Command to.
        /// </summary>
        public string Sim { get; set; }
        /// <summary>
        /// The HTTP method Twilio will use when making a request to the callback URL.
        /// </summary>
        public Twilio.Http.HttpMethod CallbackMethod { get; set; }
        /// <summary>
        /// Twilio will make a request to this URL when the Command has finished sending.
        /// </summary>
        public Uri CallbackUrl { get; set; }
        /// <summary>
        /// A string representing which mode to send the SMS message using.
        /// </summary>
        public CommandResource.CommandModeEnum CommandMode { get; set; }
        /// <summary>
        /// When sending a Command to a SIM in text mode, Twilio can automatically include the Sid of the Command in the message body, which could be used to ensure that the device does not process the same Command more than once.
        /// </summary>
        public string IncludeSid { get; set; }

        /// <summary>
        /// Construct a new CreateCommandOptions
        /// </summary>
        /// <param name="command"> The message body of the Command or a Base64 encoded byte string in binary mode. </param>
        public CreateCommandOptions(string command)
        {
            Command = command;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Command != null)
            {
                p.Add(new KeyValuePair<string, string>("Command", Command));
            }

            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim));
            }

            if (CallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackMethod", CallbackMethod.ToString()));
            }

            if (CallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackUrl", Serializers.Url(CallbackUrl)));
            }

            if (CommandMode != null)
            {
                p.Add(new KeyValuePair<string, string>("CommandMode", CommandMode.ToString()));
            }

            if (IncludeSid != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeSid", IncludeSid));
            }

            return p;
        }
    }

}