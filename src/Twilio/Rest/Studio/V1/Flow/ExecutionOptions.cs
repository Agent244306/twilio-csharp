/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Studio.V1.Flow 
{

    /// <summary>
    /// Retrieve a list of all Executions for the Flow.
    /// </summary>
    public class ReadExecutionOptions : ReadOptions<ExecutionResource> 
    {
        /// <summary>
        /// Flow Sid.
        /// </summary>
        public string PathFlowSid { get; }

        /// <summary>
        /// Construct a new ReadExecutionOptions
        /// </summary>
        /// <param name="pathFlowSid"> Flow Sid. </param>
        public ReadExecutionOptions(string pathFlowSid)
        {
            PathFlowSid = pathFlowSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// Retrieve an Execution
    /// </summary>
    public class FetchExecutionOptions : IOptions<ExecutionResource> 
    {
        /// <summary>
        /// Flow Sid.
        /// </summary>
        public string PathFlowSid { get; }
        /// <summary>
        /// Execution Sid.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchExecutionOptions
        /// </summary>
        /// <param name="pathFlowSid"> Flow Sid. </param>
        /// <param name="pathSid"> Execution Sid. </param>
        public FetchExecutionOptions(string pathFlowSid, string pathSid)
        {
            PathFlowSid = pathFlowSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// Triggers a new Execution for the Flow
    /// </summary>
    public class CreateExecutionOptions : IOptions<ExecutionResource> 
    {
        /// <summary>
        /// Flow Sid.
        /// </summary>
        public string PathFlowSid { get; }
        /// <summary>
        /// The Contact phone number to start a Studio Flow Execution.
        /// </summary>
        public Types.PhoneNumber To { get; }
        /// <summary>
        /// The Twilio phone number to send messages or initiate calls from during the Flow Execution.
        /// </summary>
        public Types.PhoneNumber From { get; }
        /// <summary>
        /// JSON data that will be added to your flow's context and can accessed as variables inside your flow.
        /// </summary>
        public object Parameters { get; set; }

        /// <summary>
        /// Construct a new CreateExecutionOptions
        /// </summary>
        /// <param name="pathFlowSid"> Flow Sid. </param>
        /// <param name="to"> The Contact phone number to start a Studio Flow Execution. </param>
        /// <param name="from"> The Twilio phone number to send messages or initiate calls from during the Flow Execution.
        ///            </param>
        public CreateExecutionOptions(string pathFlowSid, Types.PhoneNumber to, Types.PhoneNumber from)
        {
            PathFlowSid = pathFlowSid;
            To = to;
            From = from;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (To != null)
            {
                p.Add(new KeyValuePair<string, string>("To", To.ToString()));
            }

            if (From != null)
            {
                p.Add(new KeyValuePair<string, string>("From", From.ToString()));
            }

            if (Parameters != null)
            {
                p.Add(new KeyValuePair<string, string>("Parameters", Serializers.JsonObject(Parameters)));
            }

            return p;
        }
    }

    /// <summary>
    /// Delete this Execution and all Steps relating to it.
    /// </summary>
    public class DeleteExecutionOptions : IOptions<ExecutionResource> 
    {
        /// <summary>
        /// Flow Sid.
        /// </summary>
        public string PathFlowSid { get; }
        /// <summary>
        /// Execution Sid.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteExecutionOptions
        /// </summary>
        /// <param name="pathFlowSid"> Flow Sid. </param>
        /// <param name="pathSid"> Execution Sid. </param>
        public DeleteExecutionOptions(string pathFlowSid, string pathSid)
        {
            PathFlowSid = pathFlowSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}