/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Studio.V2.Flow
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// FetchFlowTestUserOptions
    /// </summary>
    public class FetchFlowTestUserOptions : IOptions<FlowTestUserResource>
    {
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchFlowTestUserOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public FetchFlowTestUserOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// UpdateFlowTestUserOptions
    /// </summary>
    public class UpdateFlowTestUserOptions : IOptions<FlowTestUserResource>
    {
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The test_users
        /// </summary>
        public List<string> TestUsers { get; }

        /// <summary>
        /// Construct a new UpdateFlowTestUserOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        /// <param name="testUsers"> The test_users </param>
        public UpdateFlowTestUserOptions(string pathSid, List<string> testUsers)
        {
            PathSid = pathSid;
            TestUsers = testUsers;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (TestUsers != null)
            {
                p.AddRange(TestUsers.Select(prop => new KeyValuePair<string, string>("TestUsers", prop)));
            }

            return p;
        }
    }

}