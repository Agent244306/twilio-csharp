/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// TerminatingSipDomainResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Trunking.V1.Trunk 
{

    public class TerminatingSipDomainResource : Resource 
    {
        private static Request BuildFetchRequest(FetchTerminatingSipDomainOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Trunking,
                "/v1/Trunks/" + options.PathTrunkSid + "/TerminatingSipDomains/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Fetch the details of an associated SIP Domain
        /// </summary>
        /// <param name="options"> Fetch TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static TerminatingSipDomainResource Fetch(FetchTerminatingSipDomainOptions options, 
                                                         ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch the details of an associated SIP Domain
        /// </summary>
        /// <param name="options"> Fetch TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<TerminatingSipDomainResource> FetchAsync(FetchTerminatingSipDomainOptions options, 
                                                                                                 ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch the details of an associated SIP Domain
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="pathSid"> The unique sid of the domain. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static TerminatingSipDomainResource Fetch(string pathTrunkSid, 
                                                         string pathSid, 
                                                         ITwilioRestClient client = null)
        {
            var options = new FetchTerminatingSipDomainOptions(pathTrunkSid, pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch the details of an associated SIP Domain
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="pathSid"> The unique sid of the domain. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<TerminatingSipDomainResource> FetchAsync(string pathTrunkSid, 
                                                                                                 string pathSid, 
                                                                                                 ITwilioRestClient client = null)
        {
            var options = new FetchTerminatingSipDomainOptions(pathTrunkSid, pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildDeleteRequest(DeleteTerminatingSipDomainOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Trunking,
                "/v1/Trunks/" + options.PathTrunkSid + "/TerminatingSipDomains/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Disassociate a SIP Domain from the Trunk
        /// </summary>
        /// <param name="options"> Delete TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static bool Delete(DeleteTerminatingSipDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary>
        /// Disassociate a SIP Domain from the Trunk
        /// </summary>
        /// <param name="options"> Delete TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteTerminatingSipDomainOptions options, 
                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary>
        /// Disassociate a SIP Domain from the Trunk
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="pathSid"> The unique sid of the domain. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static bool Delete(string pathTrunkSid, string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteTerminatingSipDomainOptions(pathTrunkSid, pathSid);
            return Delete(options, client);
        }

        #if !NET35
        /// <summary>
        /// Disassociate a SIP Domain from the Trunk
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="pathSid"> The unique sid of the domain. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathTrunkSid, 
                                                                          string pathSid, 
                                                                          ITwilioRestClient client = null)
        {
            var options = new DeleteTerminatingSipDomainOptions(pathTrunkSid, pathSid);
            return await DeleteAsync(options, client);
        }
        #endif

        private static Request BuildCreateRequest(CreateTerminatingSipDomainOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Trunking,
                "/v1/Trunks/" + options.PathTrunkSid + "/TerminatingSipDomains",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// Associate a SIP Domain with the Trunk
        /// </summary>
        /// <param name="options"> Create TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static TerminatingSipDomainResource Create(CreateTerminatingSipDomainOptions options, 
                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Associate a SIP Domain with the Trunk
        /// </summary>
        /// <param name="options"> Create TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<TerminatingSipDomainResource> CreateAsync(CreateTerminatingSipDomainOptions options, 
                                                                                                  ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Associate a SIP Domain with the Trunk
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="sipDomainSid"> The SID of the SIP Domain to associate. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static TerminatingSipDomainResource Create(string pathTrunkSid, 
                                                          string sipDomainSid, 
                                                          ITwilioRestClient client = null)
        {
            var options = new CreateTerminatingSipDomainOptions(pathTrunkSid, sipDomainSid);
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// Associate a SIP Domain with the Trunk
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="sipDomainSid"> The SID of the SIP Domain to associate. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<TerminatingSipDomainResource> CreateAsync(string pathTrunkSid, 
                                                                                                  string sipDomainSid, 
                                                                                                  ITwilioRestClient client = null)
        {
            var options = new CreateTerminatingSipDomainOptions(pathTrunkSid, sipDomainSid);
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadTerminatingSipDomainOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Trunking,
                "/v1/Trunks/" + options.PathTrunkSid + "/TerminatingSipDomains",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// List SIP Domains associated with the Trunk
        /// </summary>
        /// <param name="options"> Read TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static ResourceSet<TerminatingSipDomainResource> Read(ReadTerminatingSipDomainOptions options, 
                                                                     ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<TerminatingSipDomainResource>.FromJson("sip_domains", response.Content);
            return new ResourceSet<TerminatingSipDomainResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// List SIP Domains associated with the Trunk
        /// </summary>
        /// <param name="options"> Read TerminatingSipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<TerminatingSipDomainResource>> ReadAsync(ReadTerminatingSipDomainOptions options, 
                                                                                                             ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<TerminatingSipDomainResource>.FromJson("sip_domains", response.Content);
            return new ResourceSet<TerminatingSipDomainResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// List SIP Domains associated with the Trunk
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of TerminatingSipDomain </returns> 
        public static ResourceSet<TerminatingSipDomainResource> Read(string pathTrunkSid, 
                                                                     int? pageSize = null, 
                                                                     long? limit = null, 
                                                                     ITwilioRestClient client = null)
        {
            var options = new ReadTerminatingSipDomainOptions(pathTrunkSid){PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// List SIP Domains associated with the Trunk
        /// </summary>
        /// <param name="pathTrunkSid"> The unique sid of the trunk. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of TerminatingSipDomain </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<TerminatingSipDomainResource>> ReadAsync(string pathTrunkSid, 
                                                                                                             int? pageSize = null, 
                                                                                                             long? limit = null, 
                                                                                                             ITwilioRestClient client = null)
        {
            var options = new ReadTerminatingSipDomainOptions(pathTrunkSid){PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<TerminatingSipDomainResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<TerminatingSipDomainResource>.FromJson("sip_domains", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<TerminatingSipDomainResource> NextPage(Page<TerminatingSipDomainResource> page, 
                                                                  ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Trunking,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<TerminatingSipDomainResource>.FromJson("sip_domains", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<TerminatingSipDomainResource> PreviousPage(Page<TerminatingSipDomainResource> page, 
                                                                      ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Trunking,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<TerminatingSipDomainResource>.FromJson("sip_domains", response.Content);
        }

        /// <summary>
        /// Converts a JSON string into a TerminatingSipDomainResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> TerminatingSipDomainResource object represented by the provided JSON </returns> 
        public static TerminatingSipDomainResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<TerminatingSipDomainResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique id of the account responsible for this domain
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The Twilio API version used to process the call
        /// </summary>
        [JsonProperty("api_version")]
        public string ApiVersion { get; private set; }
        /// <summary>
        /// The types of authentication mapped to the domain
        /// </summary>
        [JsonProperty("auth_type")]
        public string AuthType { get; private set; }
        /// <summary>
        /// The date this resource was created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The date this resource was last updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// The unique address on Twilio to route SIP traffic
        /// </summary>
        [JsonProperty("domain_name")]
        public string DomainName { get; private set; }
        /// <summary>
        /// A user-specified, human-readable name for the domain.
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// A string that uniquely identifies the SIP Domain
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The url
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// HTTP method used with voice_fallback_url
        /// </summary>
        [JsonProperty("voice_fallback_method")]
        [JsonConverter(typeof(HttpMethodConverter))]
        public Twilio.Http.HttpMethod VoiceFallbackMethod { get; private set; }
        /// <summary>
        /// URL Twilio will request if an error occurs in executing TwiML
        /// </summary>
        [JsonProperty("voice_fallback_url")]
        public Uri VoiceFallbackUrl { get; private set; }
        /// <summary>
        /// HTTP method to use with voice_url
        /// </summary>
        [JsonProperty("voice_method")]
        [JsonConverter(typeof(HttpMethodConverter))]
        public Twilio.Http.HttpMethod VoiceMethod { get; private set; }
        /// <summary>
        /// The HTTP method Twilio will use to make requests to the StatusCallback URL.
        /// </summary>
        [JsonProperty("voice_status_callback_method")]
        [JsonConverter(typeof(HttpMethodConverter))]
        public Twilio.Http.HttpMethod VoiceStatusCallbackMethod { get; private set; }
        /// <summary>
        /// URL that Twilio will request with status updates
        /// </summary>
        [JsonProperty("voice_status_callback_url")]
        public Uri VoiceStatusCallbackUrl { get; private set; }
        /// <summary>
        /// URL Twilio will request when receiving a call
        /// </summary>
        [JsonProperty("voice_url")]
        public Uri VoiceUrl { get; private set; }
        /// <summary>
        /// If SIP registration is allowed
        /// </summary>
        [JsonProperty("sip_registration")]
        public bool? SipRegistration { get; private set; }
        /// <summary>
        /// Unique string to identify an associated trunk
        /// </summary>
        [JsonProperty("trunk_sid")]
        public string TrunkSid { get; private set; }
        /// <summary>
        /// The links
        /// </summary>
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }

        private TerminatingSipDomainResource()
        {

        }
    }

}